(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{475:function(e,t,n){"use strict";n.r(t);var s=n(0),a=Object(s.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("p"),e._m(0),n("p"),e._v(" "),n("p",[e._v("[TOC]")]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),n("p",[e._v("上面代码生成一个鼠标点击事件，并触发该事件。")]),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),n("p",[e._v("上面的代码中， 鼠标点击按钮会输出是否同时按下对应的键。")]),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),e._m(28),n("p",[e._v("上面代码测试鼠标的按键。")]),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._m(33),e._v(" "),e._m(34),e._v(" "),n("p",[e._v("数值上他们等于下面的计算公式：")]),e._v(" "),e._m(35),n("p",[e._v("上面的代码中，鼠标在按钮上移动的时候可以发现值的变化。")]),e._v(" "),e._m(36),e._v(" "),e._m(37),e._v(" "),e._m(38),e._m(39),e._v(" "),e._m(40),e._v(" "),e._m(41),e._m(42),e._v(" "),e._m(43),e._v(" "),e._m(44),e._v(" "),n("p",[e._v("它们的返回值都包括文档不可见的部分。")]),e._v(" "),e._m(45),e._m(46),e._v(" "),e._m(47),e._v(" "),e._m(48),e._v(" "),e._m(49),e._v(" "),e._m(50),e._v(" "),e._m(51),e._m(52),e._v(" "),e._m(53),e._v(" "),n("p",[n("code",[e._v("MouseEvent.getModifierState")]),e._v("方法返回一个布尔值，表示有没有按下特定的功能键。它的参数是一个表示"),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState#Modifier_keys_on_Gecko",target:"_blank",rel:"noopener noreferrer"}},[e._v("功能键"),n("OutboundLink")],1),e._v("的字符串。")]),e._v(" "),e._m(54),n("p",[e._v("上面的代码可以了解用户是否按下了大写键。")]),e._v(" "),e._m(55),e._v(" "),e._m(56),e._v(" "),e._m(57),e._v(" "),e._m(58),e._m(59),e._v(" "),e._m(60),e._v(" "),e._m(61),e._v(" "),e._m(62),e._v(" "),n("p",[e._v("下面的属性都是只读属性")]),e._v(" "),e._m(63),e._v(" "),e._m(64),e._m(65),e._v(" "),e._m(66),e._v(" "),e._m(67),e._v(" "),n("p",[e._v("如果用户一直按键不松开，就会连续触发键盘事件，触发的顺序如下。")]),e._v(" "),e._m(68),e._v(" "),e._m(69),e._m(70),e._v(" "),e._m(71),e._v(" "),e._m(72),e._v(" "),e._m(73),e._v(" "),e._m(74),e._v(" "),e._m(75),e._m(76),e._v(" "),e._m(77),e._v(" "),e._m(78),e._v(" "),e._m(79),e._v(" "),n("p",[e._v("以下属性都是只读属性，返回一个布尔值，表示是否按下对应的键。")]),e._v(" "),e._m(80),e._v(" "),e._m(81),e._m(82),e._v(" "),e._m(83),e._v(" "),n("p",[e._v("下面是一些常用键的字符串形式，其他键请查"),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code#Code_values",target:"_blank",rel:"noopener noreferrer"}},[e._v("文档"),n("OutboundLink")],1),e._v("。")]),e._v(" "),e._m(84),e._v(" "),e._m(85),n("p",[e._v("上面的代码执行后，在页面上按键盘后，会输出对应按键的code")]),e._v(" "),e._m(86),e._v(" "),e._m(87),e._v(" "),n("p",[e._v("如果按下的键代表可打印字符，则返回这个字符，比如数字、字母。")]),e._v(" "),n("p",[e._v("如果按下的键代表不可打印的特殊字符，则返回预定义的键值，比如 Backspace，Tab，Enter，Shift，Control，Alt，CapsLock，Esc，Spacebar，PageUp，PageDown，End，Home，Left，Right，Up，Down，PrintScreen，Insert，Del，Win，F1～F12，NumLock，Scroll 等。")]),e._v(" "),e._m(88),e._v(" "),e._m(89),e._v(" "),e._m(90),e._m(91),e._v(" "),e._m(92),e._v(" "),e._m(93),n("p",[e._v("上面的代码可以监控到按键在键盘的位置。")]),e._v(" "),e._m(94),e._v(" "),e._m(95),e._v(" "),e._m(96),n("p",[e._v("上面的代码执行后，在页面上按住一个键不放就出测试出repeat，")]),e._v(" "),e._m(97),e._v(" "),e._m(98),e._v(" "),e._m(99),e._v(" "),e._m(100),e._v(" "),n("p",[e._v("它的常用参数如下:")]),e._v(" "),e._m(101),e._v(" "),e._m(102),e._m(103),e._v(" "),e._m(104),e._v(" "),e._m(105),e._v(" "),n("p",[e._v("注意，除了资源下载，文件上传也存在这些事件。")]),e._v(" "),e._m(106),e._m(107),e._v(" "),e._m(108),e._v(" "),e._m(109),e._m(110),e._v(" "),e._m(111),e._m(112),e._v(" "),e._m(113),e._m(114),e._v(" "),e._m(115),e._v(" "),e._m(116),e._v(" "),e._m(117),e._v(" "),e._m(118),e._v(" "),e._m(119),e._m(120),e._v(" "),e._m(121),e._v(" "),e._m(122),e._v(" "),e._m(123),e._v(" "),e._m(124),e._v(" "),n("p",[e._v("下面是一个例子。")]),e._v(" "),e._m(125),e._m(126),e._v(" "),n("p",[e._v("下面是一个实际的例子。")]),e._v(" "),e._m(127),e._m(128),e._v(" "),e._m(129),e._m(130),e._v(" "),n("p",[e._v("拖拉（drag）指的是，用户在某个对象上按下鼠标键不放，拖动它到另一个位置，然后释放鼠标键，将该对象放在那里。")]),e._v(" "),e._m(131),e._v(" "),e._m(132),e._m(133),e._v(" "),e._m(134),e._v(" "),n("p",[e._v("当元素节点或选中的文本被拖拉时，就会持续触发拖拉事件，包括以下一些事件。")]),e._v(" "),e._m(135),e._v(" "),n("p",[e._v("下面的例子展示，如何动态改变被拖动节点的背景色。")]),e._v(" "),e._m(136),e._m(137),e._v(" "),n("p",[e._v("下面是一个例子，展示如何实现将一个节点从当前父节点，拖拉到另一个父节点中。")]),e._v(" "),e._m(138),n("p",[e._v("关于拖拉事件，有以下几个注意点:")]),e._v(" "),e._m(139),e._v(" "),e._m(140),e._m(141),e._v(" "),e._m(142),e._v(" "),e._m(143),e._v(" "),e._m(144),e._v(" "),e._m(145),e._m(146),e._v(" "),e._m(147),e._v(" "),e._m(148),e._v(" "),e._m(149),e._v(" "),e._m(150),e._v(" "),e._m(151),e._m(152),e._v(" "),e._m(153),e._v(" "),e._m(154),e._v(" "),e._m(155),e._v(" "),e._m(156),e._v(" "),e._m(157),e._v(" "),e._m(158),e._v(" "),e._m(159),e._v(" "),n("p",[e._v("除了上面这些值，设置其他的值都是无效的。")]),e._v(" "),e._m(160),e._m(161),e._v(" "),e._m(162),e._v(" "),e._m(163),e._m(164),e._v(" "),e._m(165),e._v(" "),e._m(166),e._v(" "),n("p",[e._v("如果某种效果是不允许的，用户就无法在目标节点中达成这种效果。")]),e._v(" "),e._m(167),e._v(" "),e._m(168),e._v(" "),e._m(169),e._m(170),e._v(" "),e._m(171),e._v(" "),e._m(172),e._v(" "),n("p",[e._v("下面就是一个接收拖拉文件的例子。")]),e._v(" "),e._m(173),e._m(174),e._v(" "),e._m(175),e._m(176),e._v(" "),e._m(177),e._v(" "),e._m(178),e._v(" "),e._m(179),n("p",[e._v("上面代码中，只有当被拖拉的节点是一个链接时，才允许在当前节点放下。")]),e._v(" "),e._m(180),e._v(" "),e._m(181),e._v(" "),n("p",[e._v("DataTransferItemList 实例具有以下的属性和方法。")]),e._v(" "),e._m(182),e._v(" "),n("p",[e._v("DataTransferItem 实例具有以下的属性和方法。")]),e._v(" "),e._m(183),e._v(" "),n("p",[e._v("下面是一个例子。")]),e._v(" "),e._m(184),n("p",[e._v("上面的代码运行后，把文件拖进div中后，会在控制台显示信息。")]),e._v(" "),e._m(185),e._v(" "),e._m(186),e._v(" "),e._m(187),e._v(" "),e._m(188),n("p",[e._v("上面代码为当前的拖拉事件加入纯文本数据。")]),e._v(" "),e._m(189),e._v(" "),e._m(190),e._v(" "),e._m(191),e._m(192),e._v(" "),e._m(193),e._v(" "),e._m(194),e._m(195),e._v(" "),e._m(196),e._v(" "),e._m(197),n("p",[e._v("可以一次提供多种格式的数据。")]),e._v(" "),e._m(198),e._m(199),e._v(" "),e._m(200),e._v(" "),e._m(201),e._v(" "),e._m(202),e._v(" "),e._m(203),n("p",[e._v("上面代码取出拖拉事件的文本数据，将其替换成当前节点的文本内容。注意，这时还必须取消浏览器的默认行为，因为假如用户拖拉的是一个链接，浏览器默认会在当前窗口打开这个链接。")]),e._v(" "),e._m(204),e._v(" "),e._m(205),e._m(206),e._v(" "),e._m(207),e._v(" "),e._m(208),n("p",[e._v("下面的例子是从多种类型的数据里面取出数据。")]),e._v(" "),e._m(209),e._m(210),e._v(" "),e._m(211),e._v(" "),e._m(212),e._m(213),e._v(" "),e._m(214),e._v(" "),e._m(215),e._v(" "),e._m(216),e._v(" "),e._m(217),e._v(" "),e._m(218),e._v(" "),n("p",[e._v("下面是一个例子。")]),e._v(" "),e._m(219),e._m(220),e._v(" "),n("p",[e._v("浏览器的触摸 API 由三个部分组成。")]),e._v(" "),e._m(221),e._v(" "),e._m(222),e._v(" "),e._m(223),e._v(" "),e._m(224),e._v(" "),e._m(225),e._v(" "),n("p",[e._v("Touch 接口代表单个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。")]),e._v(" "),e._m(226),e._v(" "),e._m(227),e._m(228),e._v(" "),e._m(229),e._v(" "),e._m(230),e._v(" "),e._m(231),e._v(" "),e._m(232),e._v(" "),e._m(233),e._m(234),e._v(" "),e._m(235),e._v(" "),e._m(236),e._v(" "),e._m(237),e._v(" "),e._m(238),e._v(" "),e._m(239),e._v(" "),e._m(240),e._v(" "),n("p",[e._v("上面这三个属性共同定义了用户与屏幕接触的区域，对于描述手指这一类非精确的触摸，很有帮助。指尖接触屏幕，触摸范围会形成一个椭圆，这三个属性就用来描述这个椭圆区域。")]),e._v(" "),n("p",[e._v("下面是一个示例。")]),e._v(" "),e._m(241),e._m(242),e._v(" "),e._m(243),e._v(" "),e._m(244),e._v(" "),e._m(245),e._v(" "),e._m(246),n("p",[e._v("上面的代码在Google的chrome浏览器中，打开开发者模式，设置为手机模式，点击一下屏幕就能看见输出。")]),e._v(" "),e._m(247),e._v(" "),e._m(248),e._v(" "),e._m(249),e._v(" "),n("p",[e._v("它的实例属性和实例方法只有两个。")]),e._v(" "),e._m(250),e._v(" "),e._m(251),n("p",[e._v("上面的代码在chrome中开发者模式，手机模式，点击一下查看效果")]),e._v(" "),e._m(252),e._v(" "),e._m(253),e._v(" "),n("p",[e._v("TouchEvent 接口继承了 Event 接口，表示由触摸引发的事件实例，通常来自触摸屏或轨迹板。除了被继承的属性以外，它还有一些自己的属性。")]),e._v(" "),e._m(254),e._v(" "),e._m(255),e._m(256),e._v(" "),e._m(257),e._v(" "),e._m(258),e._v(" "),e._m(259),e._v(" "),e._m(260),e._v(" "),e._m(261),e._v(" "),n("p",[e._v("下面是一个示例")]),e._v(" "),e._m(262),n("p",[e._v("chrome开发者打开手机模式，点击一下即可查看效果。")]),e._v(" "),e._m(263),e._v(" "),e._m(264),e._v(" "),n("p",[e._v("对于不同的时间，该属性的含义有所不同。")]),e._v(" "),e._m(265),e._v(" "),n("p",[e._v("下面是一个示例。")]),e._v(" "),e._m(266),e._m(267),e._v(" "),e._m(268),e._v(" "),n("p",[e._v("下面是一个示例。")]),e._v(" "),e._m(269),e._m(270),e._v(" "),e._m(271),e._v(" "),e._m(272),n("p",[e._v("上面代码用来判断，是否所有触摸点都在目标元素内。")]),e._v(" "),e._m(273),e._v(" "),e._m(274),e._v(" "),e._m(275),e._v(" "),n("p",[e._v("下面是一个例子")]),e._v(" "),e._m(276),e._m(277),e._v(" "),e._m(278),e._v(" "),e._m(279),e._v(" "),e._m(280),e._v(" "),e._m(281),e._v(" "),e._m(282),n("p",[e._v("上面的代码执行后，输入框中每次值的变化都会触发input事件。")]),e._v(" "),e._m(283),e._v(" "),e._m(284),e._v(" "),e._m(285),e._m(286),e._v(" "),e._m(287),e._v(" "),e._m(288),e._v(" "),e._m(289),e._v(" "),n("p",[e._v("下面是一个例子。")]),e._v(" "),e._m(290),e._m(291),e._v(" "),e._m(292),e._v(" "),e._m(293),e._m(294),e._v(" "),e._m(295),e._v(" "),e._m(296),e._v(" "),e._m(297),e._v(" "),e._m(298),e._v(" "),e._m(299),e._v(" "),e._m(300),e._v(" "),e._m(301),e._v(" "),e._m(302),e._v(" "),e._m(303),n("p",[e._v("上面代码中，用户如果关闭窗口，浏览器会弹出一个窗口，要求用户确认。")]),e._v(" "),e._m(304),e._v(" "),e._m(305),n("p",[e._v("注意，许多手机浏览器默认忽略这个事件，桌面浏览器也有方法忽略这个事件。所以，它可能根本不会生效，不能依赖它来阻止用户关闭窗口。")]),e._v(" "),e._m(306),e._v(" "),e._m(307),e._v(" "),e._m(308),e._v(" "),e._m(309),e._m(310),e._v(" "),e._m(311),e._v(" "),e._m(312),e._m(313),e._v(" "),e._m(314),e._v(" "),e._m(315),e._v(" "),e._m(316),e._v(" "),n("p",[e._v("默认情况下，浏览器会在当前会话（session）缓存页面，当用户点击“前进/后退”按钮时，浏览器就会从缓存中加载页面。")]),e._v(" "),n("p",[e._v("pageshow 事件在页面加载时触发，包括第一次加载和从缓存加载两种情况。如果要指定页面每次加载（不管是不是从浏览器缓存）时都运行的代码，可以放在这个事件的监听函数。")]),e._v(" "),e._m(317),e._v(" "),e._m(318),e._m(319),e._v(" "),e._m(320),e._m(321),e._v(" "),e._m(322),e._v(" "),e._m(323),e._v(" "),e._m(324),e._v(" "),e._m(325),e._v(" "),e._m(326),e._v(" "),e._m(327),e._m(328),e._v(" "),e._m(329),e._v(" "),e._m(330),e._v(" "),e._m(331),e._v(" "),e._m(332),e._v(" "),e._m(333),e._m(334),e._v(" "),e._m(335),e._v(" "),e._m(336),e._v(" "),e._m(337),e._m(338),e._v(" "),e._m(339),e._m(340),e._v(" "),e._m(341),e._v(" "),e._m(342),e._v(" "),e._m(343),e._m(344),e._v(" "),e._m(345),e._v(" "),e._m(346),e._v(" "),e._m(347),e._v(" "),e._m(348),e._m(349),e._v(" "),e._m(350),e._m(351),e._v(" "),e._m(352),e._v(" "),e._m(353),e._m(354),e._v(" "),e._m(355),e._v(" "),e._m(356),e._m(357),e._v(" "),e._m(358),e._v(" "),e._m(359),e._m(360),e._v(" "),e._m(361),e._v(" "),e._m(362),e._m(363),e._v(" "),e._m(364),e._v(" "),e._m(365),e._m(366),e._v(" "),e._m(367),e._v(" "),n("p",[e._v("以下三个事件属于剪贴板操作的相关事件。")]),e._v(" "),e._m(368),e._v(" "),e._m(369),e._v(" "),e._m(370),e._m(371),e._v(" "),n("p",[e._v("上面的代码使得复制进入剪贴板的，都是开发者指定的数据，而不是用户想要拷贝的数据。")]),e._v(" "),e._m(372),e._v(" "),e._m(373),e._v(" "),e._m(374),e._v(" "),e._m(375),e._v(" "),e._m(376),e._v(" "),e._m(377),e._v(" "),e._m(378),n("p",[e._v("上面代码针对表单的文本输入框，接受焦点时设置背景色，失去焦点时去除背景色。")]),e._v(" "),e._m(379),e._v(" "),n("p",[n("a",{attrs:{href:"https://wangdoc.com/javascript/events/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("事件 阮一峰 网道"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://javascript.ruanyifeng.com/dom/event-type.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("事件种类  阮一峰"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"http://js.jirengu.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("在线代码测试 JSbin"),n("OutboundLink")],1)])])},[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#_1-鼠标事件"}},[e._v("1. 鼠标事件")])]),n("li",[n("a",{attrs:{href:"#_2-mouseevent-接口概述"}},[e._v("2. MouseEvent 接口概述")])]),n("li",[n("a",{attrs:{href:"#_3-mouseevent-接口的实例属性"}},[e._v("3. MouseEvent 接口的实例属性")]),n("ul",[n("li",[n("a",{attrs:{href:"#_3-1-mouseevent-altkey，mouseevent-ctrlkey，mouseevent-metakey，mouseevent-shiftkey"}},[e._v("3.1 MouseEvent.altKey，MouseEvent.ctrlKey，MouseEvent.metaKey，MouseEvent.shiftKey")])]),n("li",[n("a",{attrs:{href:"#_3-2-mouseevent-button，mouseevent-buttons"}},[e._v("3.2 MouseEvent.button，MouseEvent.buttons")])]),n("li",[n("a",{attrs:{href:"#_3-3-mouseevent-clientx，mouseevent-clienty"}},[e._v("3.3 MouseEvent.clientX，MouseEvent.clientY")])]),n("li",[n("a",{attrs:{href:"#_3-4-mouseevent-movementx，mouseevent-movementy"}},[e._v("3.4 MouseEvent.movementX，MouseEvent.movementY")])]),n("li",[n("a",{attrs:{href:"#_3-5-mouseevent-screenx，mouseevent-screeny"}},[e._v("3.5 MouseEvent.screenX，MouseEvent.screenY")])]),n("li",[n("a",{attrs:{href:"#_3-6-mouseevent-offsetx，mouseevent-offsety"}},[e._v("3.6 MouseEvent.offsetX，MouseEvent.offsetY")])]),n("li",[n("a",{attrs:{href:"#_3-7-mouseevent-pagex，mouseevent-pagey"}},[e._v("3.7 MouseEvent.pageX，MouseEvent.pageY")])]),n("li",[n("a",{attrs:{href:"#_3-8-mouseevent-relatedtarget"}},[e._v("3.8 MouseEvent.relatedTarget")])])])]),n("li",[n("a",{attrs:{href:"#_4-mouseevent-接口的实例方法"}},[e._v("4. MouseEvent 接口的实例方法")]),n("ul",[n("li",[n("a",{attrs:{href:"#_4-1-mouseevent-getmodifierstate"}},[e._v("4.1 MouseEvent.getModifierState()")])])])]),n("li",[n("a",{attrs:{href:"#_5-wheelevent-接口"}},[e._v("5. WheelEvent 接口")]),n("ul",[n("li",[n("a",{attrs:{href:"#_5-1-实例属性"}},[e._v("5.1 实例属性")])])])]),n("li",[n("a",{attrs:{href:"#_6-键盘事件"}},[e._v("6. 键盘事件")])]),n("li",[n("a",{attrs:{href:"#_7-keyboardevent-接口"}},[e._v("7. KeyboardEvent 接口")])]),n("li",[n("a",{attrs:{href:"#_8-keyboardevent-的实例属性"}},[e._v("8. KeyboardEvent 的实例属性")]),n("ul",[n("li",[n("a",{attrs:{href:"#_8-1-keyboardevent-altkey，keyboardevent-metakey-ctrlkey，keyboardevent-metakey，keyboardevent-shiftkey"}},[e._v("8.1 KeyboardEvent.altKey，KeyboardEvent.metaKey.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey")])]),n("li",[n("a",{attrs:{href:"#_8-2-keyboardevent-code"}},[e._v("8.2 KeyboardEvent.code")])]),n("li",[n("a",{attrs:{href:"#_8-3-keyboardevent-key"}},[e._v("8.3 KeyboardEvent.key")])]),n("li",[n("a",{attrs:{href:"#_8-4-keyboardevent-location"}},[e._v("8.4 KeyboardEvent.location")])]),n("li",[n("a",{attrs:{href:"#_8-5-keyboardevent-repeat"}},[e._v("8.5 KeyboardEvent.repeat")])])])]),n("li",[n("a",{attrs:{href:"#_9-keyboardevent-的实例方法"}},[e._v("9. KeyboardEvent 的实例方法")]),n("ul",[n("li",[n("a",{attrs:{href:"#_9-1-keyboardevent-getmodifierstate"}},[e._v("9.1 KeyboardEvent.getModifierState()")])])])]),n("li",[n("a",{attrs:{href:"#_10-进度事件"}},[e._v("10. 进度事件")])]),n("li",[n("a",{attrs:{href:"#_11-progressevent-接口"}},[e._v("11. ProgressEvent 接口")])]),n("li",[n("a",{attrs:{href:"#_12-拖拉事件"}},[e._v("12. 拖拉事件")])]),n("li",[n("a",{attrs:{href:"#_13-dragevent-接口"}},[e._v("13. DragEvent 接口")])]),n("li",[n("a",{attrs:{href:"#_14-datatransfer-接口概述"}},[e._v("14. DataTransfer 接口概述")])]),n("li",[n("a",{attrs:{href:"#_15-datatransfer-的实例属性"}},[e._v("15.DataTransfer 的实例属性")]),n("ul",[n("li",[n("a",{attrs:{href:"#_15-1-datatransfer-dropeffect"}},[e._v("15.1 DataTransfer.dropEffect")])]),n("li",[n("a",{attrs:{href:"#_15-2-datatransfer-effectallowed"}},[e._v("15.2 DataTransfer.effectAllowed")])]),n("li",[n("a",{attrs:{href:"#_15-3-datatransfer-files"}},[e._v("15.3 DataTransfer.files")])]),n("li",[n("a",{attrs:{href:"#_15-4-datatransfer-types"}},[e._v("15.4 DataTransfer.types")])]),n("li",[n("a",{attrs:{href:"#_15-5-datatransfer-items"}},[e._v("15.5 DataTransfer.items")])])])]),n("li",[n("a",{attrs:{href:"#_16-datatransfer-的实例方法"}},[e._v("16. DataTransfer 的实例方法")]),n("ul",[n("li",[n("a",{attrs:{href:"#_16-1-datatransfer-setdata"}},[e._v("16.1 DataTransfer.setData()")])]),n("li",[n("a",{attrs:{href:"#_16-2-datatransfer-getdata"}},[e._v("16.2 DataTransfer.getData()")])]),n("li",[n("a",{attrs:{href:"#_16-3-datatransfer-cleardata"}},[e._v("16.3 DataTransfer.clearData()")])]),n("li",[n("a",{attrs:{href:"#_16-4-datatransfer-setdragimage"}},[e._v("16.4 DataTransfer.setDragImage()")])])])]),n("li",[n("a",{attrs:{href:"#_17-触摸操作概述"}},[e._v("17. 触摸操作概述")])]),n("li",[n("a",{attrs:{href:"#_18-touch接口"}},[e._v("18. Touch接口")]),n("ul",[n("li",[n("a",{attrs:{href:"#_18-1-touch接口概述"}},[e._v("18.1 Touch接口概述")])]),n("li",[n("a",{attrs:{href:"#_18-2-touch-接口的实例属性"}},[e._v("18.2 Touch 接口的实例属性")])])])]),n("li",[n("a",{attrs:{href:"#_19-touchlist-接口"}},[e._v("19. TouchList 接口")])]),n("li",[n("a",{attrs:{href:"#_20-touchevent-接口"}},[e._v("20. TouchEvent 接口")]),n("ul",[n("li",[n("a",{attrs:{href:"#_20-1-概述"}},[e._v("20.1 概述")])]),n("li",[n("a",{attrs:{href:"#_20-2-实例属性"}},[e._v("20.2 实例属性")])])])]),n("li",[n("a",{attrs:{href:"#_21-触摸事件的种类"}},[e._v("21. 触摸事件的种类")])]),n("li",[n("a",{attrs:{href:"#_22-表单事件的种类"}},[e._v("22. 表单事件的种类")]),n("ul",[n("li",[n("a",{attrs:{href:"#_22-1-input-事件"}},[e._v("22.1 input 事件")])]),n("li",[n("a",{attrs:{href:"#_22-2-select-事件"}},[e._v("22.2 select 事件")])]),n("li",[n("a",{attrs:{href:"#_22-3-change-事件"}},[e._v("22.3 Change 事件")])]),n("li",[n("a",{attrs:{href:"#_22-4-invalid-事件"}},[e._v("22.4 invalid 事件")])]),n("li",[n("a",{attrs:{href:"#_22-5-reset-事件，submit-事件"}},[e._v("22.5 reset 事件，submit 事件")])])])]),n("li",[n("a",{attrs:{href:"#_23-资源事件"}},[e._v("23. 资源事件")]),n("ul",[n("li",[n("a",{attrs:{href:"#_23-1-beforeunload-事件"}},[e._v("23.1 beforeunload 事件")])]),n("li",[n("a",{attrs:{href:"#_23-2-unload-事件"}},[e._v("23.2 unload 事件")])]),n("li",[n("a",{attrs:{href:"#_23-3-load-事件"}},[e._v("23.3 load 事件")])])])]),n("li",[n("a",{attrs:{href:"#_24-session-历史事件"}},[e._v("24. session 历史事件")]),n("ul",[n("li",[n("a",{attrs:{href:"#_24-1-pageshow-事件，pagehide-事件"}},[e._v("24.1 pageshow 事件，pagehide 事件")])]),n("li",[n("a",{attrs:{href:"#_24-2-popstate-事件"}},[e._v("24.2 popstate 事件")])]),n("li",[n("a",{attrs:{href:"#_24-3-hashchange-事件"}},[e._v("24.3 hashchange 事件")])])])]),n("li",[n("a",{attrs:{href:"#_25-网页状态事件"}},[e._v("25. 网页状态事件")]),n("ul",[n("li",[n("a",{attrs:{href:"#_25-1-domcontentloaded-事件"}},[e._v("25.1 DOMContentLoaded 事件")])]),n("li",[n("a",{attrs:{href:"#_25-2-readystatechange-事件"}},[e._v("25.2 readystatechange 事件")])])])]),n("li",[n("a",{attrs:{href:"#_26-窗口事件"}},[e._v("26. 窗口事件")]),n("ul",[n("li",[n("a",{attrs:{href:"#_26-1-scroll-事件"}},[e._v("26.1 scroll 事件")])]),n("li",[n("a",{attrs:{href:"#_26-2-resize-事件"}},[e._v("26.2 resize 事件")])]),n("li",[n("a",{attrs:{href:"#_26-3-fullscreenchange-事件，fullscreenerror-事件"}},[e._v("26.3 fullscreenchange 事件，fullscreenerror 事件")])])])]),n("li",[n("a",{attrs:{href:"#_27-剪贴板事件"}},[e._v("27. 剪贴板事件")])]),n("li",[n("a",{attrs:{href:"#_28-焦点事件"}},[e._v("28. 焦点事件")])]),n("li",[n("a",{attrs:{href:"#_29-参考资料"}},[e._v("29. 参考资料")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"十、事件种类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十、事件种类","aria-hidden":"true"}},[this._v("#")]),this._v(" 十、事件种类")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_1-鼠标事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-鼠标事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. 鼠标事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("鼠标事件指与鼠标相关的事件，继承了"),t("code",[this._v("MouseEvent")]),this._v("接口。具体的事件主要有以下一些。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[n("code",[e._v("click")]),e._v("：按下鼠标（通常是按下主按钮）时触发。chrome浏览器右键、滚轮不会触发")]),e._v(" "),n("li",[n("code",[e._v("dblclick")]),e._v("：在同一个元素上双击鼠标时触发。")]),e._v(" "),n("li",[n("code",[e._v("mousedown")]),e._v("：按下鼠标键时触发。")]),e._v(" "),n("li",[n("code",[e._v("mouseup")]),e._v("：释放按下的鼠标键时触发。")]),e._v(" "),n("li",[n("code",[e._v("mousemove")]),e._v("：当鼠标在一个节点内部移动时触发。当鼠标持续移动时，该事件会连续触发。为了避免性能问题，建议对该事件的监听函数做一些限定，比如限定一段时间内只能运行一次。")]),e._v(" "),n("li",[n("code",[e._v("mouseenter")]),e._v("：鼠标进入一个节点时触发，进入子节点不会触发这个事件（详见后文）。")]),e._v(" "),n("li",[n("code",[e._v("mouseover")]),e._v("：鼠标进入一个节点时触发，进入子节点会再一次触发这个事件（详见后文）。")]),e._v(" "),n("li",[n("code",[e._v("mouseout")]),e._v("：鼠标离开一个节点时触发，离开父节点也会触发这个事件（详见后文）。")]),e._v(" "),n("li",[n("code",[e._v("mouseleave")]),e._v("：鼠标离开一个节点时触发，离开父节点不会触发这个事件（详见后文）。")]),e._v(" "),n("li",[n("code",[e._v("contextmenu")]),e._v("：按下鼠标右键时（上下文菜单出现前）触发，或者按下“上下文菜单键”时触发。")]),e._v(" "),n("li",[n("code",[e._v("wheel")]),e._v("：滚动鼠标的滚轮时触发，该事件继承的是"),n("code",[e._v("WheelEvent")]),e._v("接口。")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("click")]),e._v("事件指的是，用户在同一个位置先完成"),n("code",[e._v("mousedown")]),e._v("动作，再完成"),n("code",[e._v("mouseup")]),e._v("动作。因此，触发顺序是，"),n("code",[e._v("mousedown")]),e._v("首先触发，"),n("code",[e._v("mouseup")]),e._v("接着触发，"),n("code",[e._v("click")]),e._v("最后触发。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("dblclick")]),e._v("事件则会在"),n("code",[e._v("mousedown")]),e._v("、"),n("code",[e._v("mouseup")]),e._v("、"),n("code",[e._v("click")]),e._v("之后触发。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("mouseover")]),e._v("事件和"),n("code",[e._v("mouseenter")]),e._v("事件，都是鼠标进入一个节点时触发。两者的区别是，"),n("code",[e._v("mouseenter")]),e._v("事件只触发一次，而只要鼠标在节点内部移动，"),n("code",[e._v("mouseover")]),e._v("事件会在子节点上触发多次。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<ul>\n    <li>item 1</li>\n    <li>item 2</li>\n    <li>item 3</li>\n</ul>\n<script>\n    // 进入 ul 节点以后，mouseenter 事件只会触发一次\n    // 以后只要鼠标在节点内移动，都不会再触发这个事件\n    // event.target 是 ul 节点\n    var ul = document.querySelector('ul');\n    ul.addEventListener('mouseenter', function (event) {\n        event.target.style.color = 'red';\n        setTimeout(function () { event.target.style.color = ''; }, 500);\n    }, false);\n    // 进入 ul 节点以后，只要在子节点上移动，mouseover 事件会触发多次\n  // event.target 是 li 节点\n    ul.addEventListener('mouseover', function (event) {\n        event.target.style.color = 'blue';\n        setTimeout(function () { event.target.style.color = ''; }, 500);\n    }, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，在父节点内部进入子节点，不会触发"),t("code",[this._v("mouseenter")]),this._v("事件，但是会触发"),t("code",[this._v("mouseover")]),this._v("事件。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("mouseout")]),e._v("事件和"),n("code",[e._v("mouseleave")]),e._v("事件，都是鼠标离开一个节点时触发。两者的区别是，在父元素内部离开一个子元素时，"),n("code",[e._v("mouseleave")]),e._v("事件不会触发，而"),n("code",[e._v("mouseout")]),e._v("事件会触发。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<ul>\n    <li>item 1</li>\n    <li>item 2</li>\n    <li>item 3</li>\n</ul>\n<script>\n    // 先进入 ul 节点，然后在节点内部移动，不会触发 mouseleave 事件\n    // 只有离开 ul 节点时，触发一次 mouseleave\n    // event.target 是 ul 节点\n    var ul = document.querySelector('ul');\n    ul.addEventListener('mouseleave', function (event) {\n        event.target.style.color = 'red';\n        setTimeout(function () { event.target.style.color = ''; }, 500);\n    }, false);\n    // 先进入 ul 节点，然后在节点内部移动，mouseout 事件会触发多次\n  // event.target 是 li 节点\n    ul.addEventListener('mouseout', function (event) {\n        event.target.style.color = 'yellow';\n        setTimeout(function () { event.target.style.color = ''; }, 500);\n    }, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，在父节点内部离开子节点，不会触发"),t("code",[this._v("mouseleave")]),this._v("事件，但是会触发"),t("code",[this._v("mouseout")]),this._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_2-mouseevent-接口概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-mouseevent-接口概述","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. MouseEvent 接口概述")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("MouseEvent")]),this._v("接口代表了鼠标相关的事件，单击（click）、双击（dblclick）、松开鼠标键（mouseup）、按下鼠标键（mousedown）等动作，所产生的事件对象都是"),t("code",[this._v("MouseEvent")]),this._v("实例。此外，滚轮事件和拖拉事件也是"),t("code",[this._v("MouseEvent")]),this._v("实例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("MouseEvent")]),this._v("接口继承了"),t("code",[this._v("Event")]),this._v("接口，所以拥有"),t("code",[this._v("Event")]),this._v("的所有属性和方法。它还有自己的属性和方法。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("浏览器原生提供一个"),t("code",[this._v("MouseEvent")]),this._v("构造函数，用于新建一个"),t("code",[this._v("MouseEvent")]),this._v("实例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var event = new MouseEvent(type, options);\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("MouseEvent")]),this._v("构造函数接受两个参数。第一个参数是字符串，表示事件名称；第二个参数是一个事件配置对象，该参数可选。除了"),t("code",[this._v("Event")]),this._v("接口的实例配置属性，该对象可以配置以下属性，所有属性都是可选的。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[n("code",[e._v("screenX")]),e._v("：数值，鼠标相对于屏幕的水平位置（单位像素），默认值为0，设置该属性不会移动鼠标。")]),e._v(" "),n("li",[n("code",[e._v("screenY")]),e._v("：数值，鼠标相对于屏幕的垂直位置（单位像素），其他与"),n("code",[e._v("screenX")]),e._v("相同。")]),e._v(" "),n("li",[n("code",[e._v("clientX")]),e._v("：数值，鼠标相对于程序窗口的水平位置（单位像素），默认值为0，设置该属性不会移动鼠标。")]),e._v(" "),n("li",[n("code",[e._v("clientY")]),e._v("：数值，鼠标相对于程序窗口的垂直位置（单位像素），其他与"),n("code",[e._v("clientX")]),e._v("相同。")]),e._v(" "),n("li",[n("code",[e._v("ctrlKey")]),e._v("：布尔值，是否同时按下了 Ctrl 键，默认值为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("shiftKey")]),e._v("：布尔值，是否同时按下了 Shift 键，默认值为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("altKey")]),e._v("：布尔值，是否同时按下 Alt 键，默认值为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("metaKey")]),e._v("：布尔值，是否同时按下 Meta 键，默认值为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("button")]),e._v("：数值，表示按下了哪一个鼠标按键，默认值为"),n("code",[e._v("0")]),e._v("，表示按下主键（通常是鼠标的左键）或者当前事件没有定义这个属性；"),n("code",[e._v("1")]),e._v("表示按下辅助键（通常是鼠标的中间键），"),n("code",[e._v("2")]),e._v("表示按下次要键（通常是鼠标的右键）。")]),e._v(" "),n("li",[n("code",[e._v("buttons")]),e._v("：数值，表示按下了鼠标的哪些键，是一个三个比特位的二进制值，默认为"),n("code",[e._v("0")]),e._v("（没有按下任何键）。"),n("code",[e._v("1")]),e._v("（二进制"),n("code",[e._v("001")]),e._v("）表示按下主键（通常是左键），"),n("code",[e._v("2")]),e._v("（二进制"),n("code",[e._v("010")]),e._v("）表示按下次要键（通常是右键），"),n("code",[e._v("4")]),e._v("（二进制"),n("code",[e._v("100")]),e._v("）表示按下辅助键（通常是中间键）。因此，如果返回"),n("code",[e._v("3")]),e._v("（二进制"),n("code",[e._v("011")]),e._v("）就表示同时按下了左键和右键。")]),e._v(" "),n("li",[n("code",[e._v("relatedTarget")]),e._v("：节点对象，表示事件的相关节点，默认为"),n("code",[e._v("null")]),e._v("。"),n("code",[e._v("mouseenter")]),e._v("和"),n("code",[e._v("mouseover")]),e._v("事件时，表示鼠标刚刚离开的那个元素节点；"),n("code",[e._v("mouseout")]),e._v("和"),n("code",[e._v("mouseleave")]),e._v("事件时，表示鼠标正在进入的那个元素节点。")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<input id=\"btn\" type=\"checkbox\">\n<script>\n    var event = new MouseEvent('click', {\n        'bubbles': true, 'cancelable': true\n    });\n    var cb = document.getElementById('btn');\n    cb.dispatchEvent(event);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_3-mouseevent-接口的实例属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-mouseevent-接口的实例属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. MouseEvent 接口的实例属性")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_3-1-mouseevent-altkey，mouseevent-ctrlkey，mouseevent-metakey，mouseevent-shiftkey"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-mouseevent-altkey，mouseevent-ctrlkey，mouseevent-metakey，mouseevent-shiftkey","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.1 MouseEvent.altKey，MouseEvent.ctrlKey，MouseEvent.metaKey，MouseEvent.shiftKey")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("MouseEvent.altKey")]),e._v("、"),n("code",[e._v("MouseEvent.ctrlKey")]),e._v("、"),n("code",[e._v("MouseEvent.metaKey")]),e._v("、"),n("code",[e._v("MouseEvent.shiftKey")]),e._v("这四个属性都返回一个布尔值，表示事件发生时，是否按下对应的键。它们都是只读属性。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[n("code",[e._v("altKey")]),e._v("属性：Alt 键")]),e._v(" "),n("li",[n("code",[e._v("ctrlKey")]),e._v("属性：Ctrl 键")]),e._v(" "),n("li",[n("code",[e._v("metaKey")]),e._v("属性：Meta 键（Mac 键盘是一个四瓣的小花，Windows 键盘是 Windows 键）")]),e._v(" "),n("li",[n("code",[e._v("shiftKey")]),e._v("属性：Shift 键")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<button id=\"btn\">按钮</button>\n<script>\n    function showKey(e) {\n        console.log('ALT key pressed: ' + e.altKey);\n        console.log('CTRL key pressed: ' + e.ctrlKey);\n        console.log('META key pressed: ' + e.metaKey);\n        console.log('SHIFT key pressed: ' + e.shiftKey);\n    }\n    var btn = document.getElementById('btn');\n    btn.onclick = showKey;\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_3-2-mouseevent-button，mouseevent-buttons"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-mouseevent-button，mouseevent-buttons","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.2 MouseEvent.button，MouseEvent.buttons")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("p",[n("code",[e._v("MouseEvent.button")]),e._v("属性返回一个数值，表示事件发生时按下了鼠标的哪个键。该属性只读。")]),e._v(" "),n("blockquote",[n("p",[e._v("0：按下主键（通常是左键），或者该事件没有初始化这个属性（比如"),n("code",[e._v("mousemove")]),e._v("事件）。")]),e._v(" "),n("p",[e._v("1：按下辅助键（通常是中键或者滚轮键）。")]),e._v(" "),n("p",[e._v("2：按下次键（通常是右键）。")])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("MouseEvent.buttons")]),e._v("属性返回一个三个比特位的值，表示同时按下了哪些键。它用来处理同时按下多个鼠标键的情况。该属性只读。")]),e._v(" "),n("blockquote",[n("p",[e._v("1：二进制为"),n("code",[e._v("001")]),e._v("（十进制的1），表示按下左键。")]),e._v(" "),n("p",[e._v("2：二进制为"),n("code",[e._v("010")]),e._v("（十进制的2），表示按下右键。")]),e._v(" "),n("p",[e._v("4：二进制为"),n("code",[e._v("100")]),e._v("（十进制的4），表示按下中键或滚轮键。")])]),e._v(" "),n("p",[e._v("同时按下多个键的时候，每个按下的键对应的比特位都会有值。比如，同时按下左键和右键，会返回3（二进制为011）。")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<button id=\"btn\">按钮</button>\n<script>\n    //去掉默认的contextmenu事件，否则会和右键事件同时出现。\n    document.oncontextmenu = function(e){ e.preventDefault(); };\n    function showKey(e) {\n        console.log('button : ' + e.button);\n        console.log('buttons : ' + e.buttons);\n    }\n    var btn = document.getElementById('btn');\n    //   btn.onclick = showKey;\n    //     btn.onmouseup = showKey;\n    btn.onmousedown = showKey;\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_3-3-mouseevent-clientx，mouseevent-clienty"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-mouseevent-clientx，mouseevent-clienty","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.3 MouseEvent.clientX，MouseEvent.clientY")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("MouseEvent.clientX")]),this._v("属性返回鼠标位置相对于浏览器窗口左上角的水平坐标（单位像素）")]),this._v(" "),t("li",[t("code",[this._v("MouseEvent.clientY")]),this._v("属性返回垂直坐标。这两个属性都是只读属性")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这两个属性还分别有一个别名"),t("code",[this._v("MouseEvent.x")]),this._v("和"),t("code",[this._v("MouseEvent.y")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<button id="btn">按钮</button>\n<script>\n    function showKey(e) {\n        console.log("clientX value:", e.clientX);\n        console.log("clientY value: ", e.clientY);\n        console.log("x value:", e.x);\n        console.log("y value: ", e.y);\n    }\n    var btn = document.getElementById(\'btn\');\n    btn.onmousedown = showKey;\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_3-4-mouseevent-movementx，mouseevent-movementy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-mouseevent-movementx，mouseevent-movementy","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.4 MouseEvent.movementX，MouseEvent.movementY")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("MouseEvent.movementX")]),e._v("属性返回当前位置与上一个"),n("code",[e._v("mousemove")]),e._v("事件之间的水平距离（单位像素）,只读")]),e._v(" "),n("li",[n("code",[e._v("MouseEvent.movementY")]),e._v("属性返回当前位置与上一个"),n("code",[e._v("mousemove")]),e._v("事件之间的垂直距离（单位像素）,只读")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('currentEvent.movementX = currentEvent.screenX - previousEvent.screenX\ncurrentEvent.movementY = currentEvent.screenY - previousEvent.screenY\n<button id="btn">按钮11111111</button>\n<script>\n    function showKey(e) {\n        console.log("movementX :", e.movementX);\n        console.log("movementY : ", e.movementY );      \n    }\n    var btn = document.getElementById(\'btn\');\n    btn.onmousemove = showKey;\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_3-5-mouseevent-screenx，mouseevent-screeny"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-mouseevent-screenx，mouseevent-screeny","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.5 MouseEvent.screenX，MouseEvent.screenY")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("MouseEvent.screenX")]),this._v("属性返回鼠标位置相对于屏幕左上角的水平坐标（单位像素），只读")]),this._v(" "),t("li",[t("code",[this._v("MouseEvent.screenY")]),this._v("属性返回垂直坐标，只读属性")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<button id="btn">按钮11111111</button>\n<script>\n    function showKey(e) {\n        console.log("screenX:", e.screenX );\n        console.log("screenY:", e.screenY);      \n    }\n    var btn = document.getElementById(\'btn\');\n    btn.onmousedown = showKey;\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_3-6-mouseevent-offsetx，mouseevent-offsety"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-mouseevent-offsetx，mouseevent-offsety","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.6 MouseEvent.offsetX，MouseEvent.offsetY")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("MouseEvent.offsetX")]),e._v("属性返回鼠标位置与目标节点左侧的"),n("code",[e._v("padding")]),e._v("边缘的水平距离（单位像素）,只读")]),e._v(" "),n("li",[n("code",[e._v("MouseEvent.offsetY")]),e._v("属性返回与目标节点上方的"),n("code",[e._v("padding")]),e._v("边缘的垂直距离，只读")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<style>\n    p {\n        width: 100px; height: 100px; padding: 100px; border: 1px solid;\n    }\n</style>\n<p>Hello</p>\n<script>\n    var p = document.querySelector('p');\n    p.addEventListener(\n        'click',\n        function (e) {\n            console.log(e.offsetX);\n            console.log(e.offsetY);\n        },\n        false\n    );\n<\/script>\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("上面代码中，鼠标如果在"),n("code",[e._v("p")]),e._v("元素的中心位置点击，会返回"),n("code",[e._v("150 150")]),e._v("。因此中心位置距离左侧和上方的"),n("code",[e._v("padding")]),e._v("边缘，等于"),n("code",[e._v("padding")]),e._v("的宽度（100像素）加上元素内容区域一半的宽度（50像素）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_3-7-mouseevent-pagex，mouseevent-pagey"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-mouseevent-pagex，mouseevent-pagey","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.7 MouseEvent.pageX，MouseEvent.pageY")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("MouseEvent.pageX")]),this._v("属性返回鼠标位置与文档左侧边缘的距离（单位像素）,只读")]),this._v(" "),t("li",[t("code",[this._v("MouseEvent.pageY")]),this._v("属性返回与文档上侧边缘的距离（单位像素）,只读")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<style>\n    body { height: 2000px; border: 5px solid red; }\n</style>\n<p>Hello</p>\n<script>\n    document.body.addEventListener(\n        'click',\n        function (e) {\n            console.log(e.pageX);\n            console.log(e.pageY);\n        },\n        false\n    );\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，页面高度为2000像素，会产生垂直滚动条。滚动到页面底部，点击鼠标输出的"),t("code",[this._v("pageY")]),this._v("值会接近2000。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_3-8-mouseevent-relatedtarget"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-mouseevent-relatedtarget","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.8 MouseEvent.relatedTarget")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("MouseEvent.relatedTarget")]),this._v("属性返回事件的相关节点。对于那些没有相关节点的事件，该属性返回"),t("code",[this._v("null")]),this._v("。该属性只读。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下表列出不同事件的"),t("code",[this._v("target")]),this._v("属性值和"),t("code",[this._v("relatedTarget")]),this._v("属性值义。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[e._v("事件名称")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("target 属性")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("relatedTarget 属性")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("focusin")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("接受焦点的节点")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("丧失焦点的节点")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("focusout")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("丧失焦点的节点")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("接受焦点的节点")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("mouseenter")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要进入的节点")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要离开的节点")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("mouseleave")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要离开的节点")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要进入的节点")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("mouseout")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要离开的节点")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要进入的节点")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("mouseover")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要进入的节点")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要离开的节点")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("dragenter")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要进入的节点")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要离开的节点")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("dragexit")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要离开的节点")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("将要进入的节点")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<div id=\"outer\" style=\"height:100px;width:100px;border:1px solid black;\">outer\n    <div id=\"inner\" style=\"height:50px;width:50px;border:1px solid black;\">inner</div>\n</div>\n<script>\n    var inner = document.getElementById('inner');\n    inner.addEventListener('mouseover', function (event) {\n        console.log('进入' + event.target.id + ' 离开' + event.relatedTarget.id);\n    }, false);\n    inner.addEventListener('mouseenter', function (event) {\n        console.log('进入' + event.target.id + ' 离开' + event.relatedTarget.id);\n    });\n    inner.addEventListener('mouseout', function () {\n        console.log('离开' + event.target.id + ' 进入' + event.relatedTarget.id);\n    });\n    inner.addEventListener(\"mouseleave\", function (){\n        console.log('离开' + event.target.id + ' 进入' + event.relatedTarget.id);\n    });\n    // 鼠标从 outer 进入inner，输出\n    // 进入inner 离开outer\n    // 进入inner 离开outer\n\n    // 鼠标从 inner进入 outer，输出\n    // 离开inner 进入outer\n    // 离开inner 进入outer\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_4-mouseevent-接口的实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-mouseevent-接口的实例方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 4. MouseEvent 接口的实例方法")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_4-1-mouseevent-getmodifierstate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-mouseevent-getmodifierstate","aria-hidden":"true"}},[this._v("#")]),this._v(" 4.1 MouseEvent.getModifierState()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<button id=\"btn\">按钮11111111</button>\n<script>\n    function showKey(e) {\n        console.log(e.getModifierState('CapsLock'));  \n    }\n    var btn = document.getElementById('btn');\n    btn.onclick = showKey;\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_5-wheelevent-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-wheelevent-接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 5. WheelEvent 接口")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("WheelEvent 接口继承了 MouseEvent 实例，代表鼠标滚轮事件的实例对象。目前，鼠标滚轮相关的事件只有一个"),t("code",[this._v("wheel")]),this._v("事件，用户滚动鼠标的滚轮，就生成这个事件的实例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("浏览器原生提供"),t("code",[this._v("WheelEvent()")]),this._v("构造函数，用来生成"),t("code",[this._v("WheelEvent")]),this._v("实例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var wheelEvent = new WheelEvent(type, options);\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("WheelEvent()")]),e._v("构造函数可以接受两个参数，第一个是字符串，表示事件类型，对于滚轮事件来说，这个值目前只能是"),n("code",[e._v("wheel")]),e._v("。第二个参数是事件的配置对象。该对象的属性除了"),n("code",[e._v("Event")]),e._v("、"),n("code",[e._v("UIEvent")]),e._v("的配置属性以外，还可以接受以下几个属性，所有属性都是可选的。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[n("code",[e._v("deltaX")]),e._v("：数值，表示滚轮的水平滚动量，默认值是 0.0。")]),e._v(" "),n("li",[n("code",[e._v("deltaY")]),e._v("：数值，表示滚轮的垂直滚动量，默认值是 0.0。")]),e._v(" "),n("li",[n("code",[e._v("deltaZ")]),e._v("：数值，表示滚轮的 Z 轴滚动量，默认值是 0.0。")]),e._v(" "),n("li",[n("code",[e._v("deltaMode")]),e._v("：数值，表示相关的滚动事件的单位，适用于上面三个属性。"),n("code",[e._v("0")]),e._v("表示滚动单位为像素，"),n("code",[e._v("1")]),e._v("表示单位为行，"),n("code",[e._v("2")]),e._v("表示单位为页，默认为"),n("code",[e._v("0")]),e._v("。")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_5-1-实例属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-实例属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 5.1 实例属性")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("WheelEvent")]),this._v("事件实例除了具有"),t("code",[this._v("Event")]),this._v("和"),t("code",[this._v("MouseEvent")]),this._v("的实例属性和实例方法，还有一些自己的实例属性，但是没有自己的实例方法。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[n("code",[e._v("WheelEvent.deltaX")]),e._v("：数值，表示滚轮的水平滚动量。")]),e._v(" "),n("p",[n("code",[e._v("WheelEvent.deltaY")]),e._v("：数值，表示滚轮的垂直滚动量。")]),e._v(" "),n("p",[n("code",[e._v("WheelEvent.deltaZ")]),e._v("：数值，表示滚轮的 Z 轴滚动量。")]),e._v(" "),n("p",[n("code",[e._v("WheelEvent.deltaMode")]),e._v("：数值，表示上面三个属性的单位，"),n("code",[e._v("0")]),e._v("是像素，"),n("code",[e._v("1")]),e._v("是行，"),n("code",[e._v("2")]),e._v("是页。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<button id="btn">按钮11111111</button>\n<script>\n    function showKey(e) {\n        console.log("deltaX ", e.deltaX); // deltaX  30\n        console.log("deltaY ", e.deltaY); // deltaY  50\n        console.log("deltaMode ", e.deltaMode );  // deltaMode  0\n    }\n    var btn = document.getElementById(\'btn\');\n    var wheelEvent = new WheelEvent("wheel", {"deltaX": 30,deltaY: 50});\n    btn.onwheel  = showKey;\n    btn.dispatchEvent(wheelEvent);\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_6-键盘事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-键盘事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 6. 键盘事件")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("键盘事件由用户击打键盘触发，主要有"),n("code",[e._v("keydown")]),e._v("、"),n("code",[e._v("keypress")]),e._v("、"),n("code",[e._v("keyup")]),e._v("三个事件，它们都继承了"),n("code",[e._v("KeyboardEvent")]),e._v("接口。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("keydown")]),e._v("：按下键盘时触发。")]),e._v(" "),n("li",[n("code",[e._v("keypress")]),e._v("：按下有值的键时触发，即按下 Ctrl、Alt、Shift、Meta 这样无值的键，这个事件不会触发。对于有值的键，按下时先触发"),n("code",[e._v("keydown")]),e._v("事件，再触发这个事件。")]),e._v(" "),n("li",[n("code",[e._v("keyup")]),e._v("：松开键盘时触发该事件。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",[n("li",[e._v("keydown")]),e._v(" "),n("li",[e._v("keypress")]),e._v(" "),n("li",[e._v("keydown")]),e._v(" "),n("li",[e._v("keypress")]),e._v(" "),n("li",[e._v("…（重复以上过程）")]),e._v(" "),n("li",[e._v("keyup")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<input id="btn" type="text">\n<script>\n    function showKey(e) { console.log(e.type);   }\n    var btn = document.getElementById(\'btn\');\n    btn.onclick  = showKey;\n    btn.onkeydown = showKey;\n    btn.onkeypress = showKey;\n    btn.onkeyup = showKey;\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面的代码中，在输入框中输入一个字母的时候输出："),t("code",[this._v("keydown")]),this._v("、"),t("code",[this._v("keypress")]),this._v("、"),t("code",[this._v("keyup")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在输入框按下shift键的时候输出："),t("code",[this._v("keydown")]),this._v("、"),t("code",[this._v("keyup")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_7-keyboardevent-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-keyboardevent-接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 7. KeyboardEvent 接口")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("KeyboardEvent")]),this._v("接口用来描述用户与键盘的互动。这个接口继承了"),t("code",[this._v("Event")]),this._v("接口，并且定义了自己的实例属性和实例方法。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("浏览器原生提供"),t("code",[this._v("KeyboardEvent")]),this._v("构造函数，用来新建键盘事件的实例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("new KeyboardEvent(type, options)\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("KeyboardEvent")]),this._v("构造函数接受两个参数。第一个参数是字符串，表示事件类型；第二个参数是一个事件配置对象，该参数可选。除了"),t("code",[this._v("Event")]),this._v("接口提供的属性，还可以配置以下字段，它们都是可选。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("key")]),e._v("：字符串，当前按下的键，默认为空字符串。")]),e._v(" "),n("li",[n("code",[e._v("code")]),e._v("：字符串，表示当前按下的键的字符串形式，默认为空字符串。")]),e._v(" "),n("li",[n("code",[e._v("location")]),e._v("：整数，当前按下的键的位置，默认为"),n("code",[e._v("0")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("ctrlKey")]),e._v("：布尔值，是否按下 Ctrl 键，默认为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("shiftKey")]),e._v("：布尔值，是否按下 Shift 键，默认为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("altKey")]),e._v("：布尔值，是否按下 Alt 键，默认为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("metaKey")]),e._v("：布尔值，是否按下 Meta 键，默认为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("repeat")]),e._v("：布尔值，是否重复按键，默认为"),n("code",[e._v("false")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_8-keyboardevent-的实例属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-keyboardevent-的实例属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 8. KeyboardEvent 的实例属性")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_8-1-keyboardevent-altkey，keyboardevent-metakey-ctrlkey，keyboardevent-metakey，keyboardevent-shiftkey"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-keyboardevent-altkey，keyboardevent-metakey-ctrlkey，keyboardevent-metakey，keyboardevent-shiftkey","aria-hidden":"true"}},[this._v("#")]),this._v(" 8.1 KeyboardEvent.altKey，KeyboardEvent.metaKey.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("KeyboardEvent.altKey")]),e._v("：是否按下 Alt 键")]),e._v(" "),n("li",[n("code",[e._v("KeyboardEvent.ctrlKey")]),e._v("：是否按下 Ctrl 键")]),e._v(" "),n("li",[n("code",[e._v("KeyboardEvent.metaKey")]),e._v("：是否按下 meta 键（Mac 系统是一个四瓣的小花，Windows 系统是 windows 键）")]),e._v(" "),n("li",[n("code",[e._v("KeyboardEvent.shiftKey")]),e._v("：是否按下 Shift 键")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<script>\n    function showChar(e){\n        console.log("ALT: " + e.altKey);\n        console.log("CTRL: " + e.ctrlKey);\n        console.log("Meta: " + e.metaKey);\n        console.log("Meta: " + e.shiftKey);\n    }\n    document.body.addEventListener(\'keyup\', showChar, false);\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_8-2-keyboardevent-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-keyboardevent-code","aria-hidden":"true"}},[this._v("#")]),this._v(" 8.2 KeyboardEvent.code")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("KeyboardEvent.code")]),this._v("属性返回一个字符串，表示当前按下的键的字符串形式。该属性只读。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("p",[e._v("数字键0 - 9：返回"),n("code",[e._v("digital0")]),e._v(" - "),n("code",[e._v("digital9")])]),e._v(" "),n("p",[e._v("字母键A - z：返回"),n("code",[e._v("KeyA")]),e._v(" - "),n("code",[e._v("KeyZ")])]),e._v(" "),n("p",[e._v("功能键F1 - F12：返回 "),n("code",[e._v("F1")]),e._v(" - "),n("code",[e._v("F12")])]),e._v(" "),n("p",[e._v("方向键：返回"),n("code",[e._v("ArrowDown")]),e._v("、"),n("code",[e._v("ArrowUp")]),e._v("、"),n("code",[e._v("ArrowLeft")]),e._v("、"),n("code",[e._v("ArrowRight")])]),e._v(" "),n("p",[e._v("Alt 键：返回"),n("code",[e._v("AltLeft")]),e._v("或"),n("code",[e._v("AltRight")])]),e._v(" "),n("p",[e._v("Shift 键：返回"),n("code",[e._v("ShiftLeft")]),e._v("或"),n("code",[e._v("ShiftRight")])]),e._v(" "),n("p",[e._v("Ctrl 键：返回"),n("code",[e._v("ControLeft")]),e._v("或"),n("code",[e._v("ControlRight")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<script>\n    function showChar(e){\n        console.log(\"code: \" + e.code);\n    }\n    document.body.addEventListener('keyup', showChar, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_8-3-keyboardevent-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-keyboardevent-key","aria-hidden":"true"}},[this._v("#")]),this._v(" 8.3 KeyboardEvent.key")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("KeyboardEvent.key")]),this._v("属性返回一个字符串，表示按下的键名。该属性只读。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果同时按下一个控制键和一个符号键，则返回符号键的键名。比如，按下 Ctrl + a，则返回"),t("code",[this._v("a")]),this._v("；按下 Shift + a，则返回大写的"),t("code",[this._v("A")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果无法识别键名，返回字符串"),t("code",[this._v("Unidentified")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<script>\n    function showChar(e){ console.log(\"key: \" + e.key); }\n    document.body.addEventListener('keyup', showChar, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_8-4-keyboardevent-location"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-keyboardevent-location","aria-hidden":"true"}},[this._v("#")]),this._v(" 8.4 KeyboardEvent.location")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("p",[n("code",[e._v("KeyboardEvent.location")]),e._v("属性返回一个整数，表示按下的键处在键盘的哪一个区域。它可能取以下值")]),e._v(" "),n("blockquote",[n("p",[e._v("0：处在键盘的主区域，或者无法判断处于哪一个区域。")]),e._v(" "),n("p",[e._v("1：处在键盘的左侧，只适用那些有两个位置的键（比如 Ctrl 和 Shift 键）。")]),e._v(" "),n("p",[e._v("2：处在键盘的右侧，只适用那些有两个位置的键（比如 Ctrl 和 Shift 键）。")]),e._v(" "),n("p",[e._v("3：处在数字小键盘。")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<script>\n    function showChar(e){ console.log(\"location: \" + e.location); }\n    document.body.addEventListener('keyup', showChar, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_8-5-keyboardevent-repeat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-5-keyboardevent-repeat","aria-hidden":"true"}},[this._v("#")]),this._v(" 8.5 KeyboardEvent.repeat")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("KeyboardEvent.repeat")]),this._v("返回一个布尔值，代表该键是否被按着不放，以便判断是否重复这个键，即浏览器会持续触发"),t("code",[this._v("keydown")]),this._v("和"),t("code",[this._v("keypress")]),this._v("事件，直到用户松开手为止。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<script>\n    function showChar(e){ console.log(\"repeat: \" + e.repeat); }\n    document.body.addEventListener('keydown', showChar, false);\n    // document.body.addEventListener('keypress', showChar, false);\n    // document.body.addEventListener('keyup', showChar, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("注意监听"),t("code",[this._v("keyup")]),this._v("不会触发"),t("code",[this._v("repeat")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_9-keyboardevent-的实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-keyboardevent-的实例方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 9. KeyboardEvent 的实例方法")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_9-1-keyboardevent-getmodifierstate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-keyboardevent-getmodifierstate","aria-hidden":"true"}},[this._v("#")]),this._v(" 9.1 KeyboardEvent.getModifierState()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("KeyboardEvent.getModifierState()")]),this._v("方法返回一个布尔值，表示是否按下或激活指定的功能键。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[n("code",[e._v("Alt")]),e._v("：Alt 键")]),e._v(" "),n("li",[n("code",[e._v("CapsLock")]),e._v("：大写锁定键")]),e._v(" "),n("li",[n("code",[e._v("Control")]),e._v("：Ctrl 键")]),e._v(" "),n("li",[n("code",[e._v("Meta")]),e._v("：Meta 键")]),e._v(" "),n("li",[n("code",[e._v("NumLock")]),e._v("：数字键盘开关键")]),e._v(" "),n("li",[n("code",[e._v("Shift")]),e._v("：Shift 键")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<script>\n    function showChar(e){ \n        if (\n            event.getModifierState('Control') +\n            event.getModifierState('Alt') +\n            event.getModifierState('Meta') == 3\n        ) {\n            console.log('Control Alt Meta')\n        } else { console.log('没有') }\n    }\n    document.body.addEventListener('keydown', showChar, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_10-进度事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-进度事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 10. 进度事件")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("进度事件用来描述资源加载的进度，主要由 AJAX 请求、"),n("code",[e._v("<img>")]),e._v("、"),n("code",[e._v("<audio>")]),e._v("、"),n("code",[e._v("<video>")]),e._v("、"),n("code",[e._v("<style>")]),e._v("、"),n("code",[e._v("<link>")]),e._v("等外部资源的加载触发，继承了"),n("code",[e._v("ProgressEvent")]),e._v("接口。它主要包含以下几种事件:")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[n("code",[e._v("abort")]),e._v("：外部资源中止加载时（比如用户取消）触发。如果发生错误导致中止，不会触发该事件。")]),e._v(" "),n("li",[n("code",[e._v("error")]),e._v("：由于错误导致外部资源无法加载时触发。")]),e._v(" "),n("li",[n("code",[e._v("load")]),e._v("：外部资源加载成功时触发。")]),e._v(" "),n("li",[n("code",[e._v("loadstart")]),e._v("：外部资源开始加载时触发。")]),e._v(" "),n("li",[n("code",[e._v("loadend")]),e._v("：外部资源停止加载时触发，发生顺序排在"),n("code",[e._v("error")]),e._v("、"),n("code",[e._v("abort")]),e._v("、"),n("code",[e._v("load")]),e._v("等事件的后面。")]),e._v(" "),n("li",[n("code",[e._v("progress")]),e._v("：外部资源加载过程中不断触发。")]),e._v(" "),n("li",[n("code",[e._v("timeout")]),e._v("：加载超时时触发。")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("image.addEventListener('load', function (event) {\n  image.classList.add('finished');\n});\n\nimage.addEventListener('error', function (event) {\n  image.style.display = 'none';\n});\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码在图片元素加载完成后，为图片元素添加一个"),t("code",[this._v("finished")]),this._v("的 Class。如果加载失败，就把图片元素的样式设置为不显示。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("有时候，图片加载会在脚本运行之前就完成，尤其是当脚本放置在网页底部的时候，因此有可能"),t("code",[this._v("load")]),this._v("和"),t("code",[this._v("error")]),this._v("事件的监听函数根本不会执行。所以，比较可靠的方式，是用"),t("code",[this._v("complete")]),this._v("属性先判断一下是否加载完成。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function loaded() {\n  // ...\n}\n\nif (image.complete) {\n  loaded();\n} else {\n  image.addEventListener('load', loaded);\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("由于 DOM 的元素节点没有提供是否加载错误的属性，所以"),t("code",[this._v("error")]),this._v("事件的监听函数最好放在"),t("code",[this._v("<img>")]),this._v("元素的 HTML 代码中，这样才能保证发生加载错误时百分之百会执行。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<img src="/wrong/url" onerror="this.style.display=\'none\';" />\n')])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("loadend")]),e._v("事件的监听函数，可以用来取代"),n("code",[e._v("abort")]),e._v("事件、"),n("code",[e._v("load")]),e._v("事件、"),n("code",[e._v("error")]),e._v("事件的监听函数，因为它总是在这些事件之后发生。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("req.addEventListener('loadend', loadEnd, false);\n\nfunction loadEnd(e) {\n  console.log('传输结束，成功失败未知');\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("loadend")]),this._v("事件本身不提供关于进度结束的原因，但可以用它来做所有加载结束场景都需要做的一些操作。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("另外，"),t("code",[this._v("error")]),this._v("事件有一个特殊的性质，就是不会冒泡。所以，子元素的"),t("code",[this._v("error")]),this._v("事件，不会触发父元素的"),t("code",[this._v("error")]),this._v("事件监听函数。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_11-progressevent-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-progressevent-接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 11. ProgressEvent 接口")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("ProgressEvent")]),e._v("接口主要用来描述外部资源加载的进度，比如 AJAX 加载、"),n("code",[e._v("<img>")]),e._v("、"),n("code",[e._v("<video>")]),e._v("、"),n("code",[e._v("<style>")]),e._v("、"),n("code",[e._v("<link>")]),e._v("等外部资源加载。进度相关的事件都继承了这个接口。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("浏览器原生提供了"),t("code",[this._v("ProgressEvent()")]),this._v("构造函数，用来生成事件实例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("new ProgressEvent(type, options)\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("ProgressEvent()")]),this._v("构造函数接受两个参数。第一个参数是字符串，表示事件的类型，这个参数是必须的。第二个参数是一个配置对象，表示事件的属性，该参数可选。配置对象除了可以使用"),t("code",[this._v("Event")]),this._v("接口的配置属性，还可以使用下面的属性，所有这些属性都是可选的。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[n("code",[e._v("lengthComputable")]),e._v("：布尔值，表示加载的总量是否可以计算，默认是"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("loaded")]),e._v("：整数，表示已经加载的量，默认是"),n("code",[e._v("0")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("total")]),e._v("：整数，表示需要加载的总量，默认是"),n("code",[e._v("0")]),e._v("。")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("ProgressEvent")]),this._v("具有对应的实例属性。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("ul",[t("li",[t("code",[this._v("ProgressEvent.lengthComputable")])]),this._v(" "),t("li",[t("code",[this._v("ProgressEvent.loaded")])]),this._v(" "),t("li",[t("code",[this._v("ProgressEvent.total")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果"),t("code",[this._v("ProgressEvent.lengthComputable")]),this._v("为"),t("code",[this._v("false")]),this._v("，"),t("code",[this._v("ProgressEvent.total")]),this._v("实际上是没有意义的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<script>\n    var p = new ProgressEvent('load', {\n        lengthComputable: true,\n        loaded: 30,\n        total: 100,\n    });\n    document.body.addEventListener('load', function (e) {\n        console.log('已经加载：' + (e.loaded / e.total) * 100 + '%');\n    });\n    document.body.dispatchEvent(p);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码先构造一个"),t("code",[this._v("load")]),this._v("事件，抛出后被监听函数捕捉到。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var xhr = new XMLHttpRequest();\n\nxhr.addEventListener('progress', updateProgress, false);\nxhr.addEventListener('load', transferComplete, false);\nxhr.addEventListener('error', transferFailed, false);\nxhr.addEventListener('abort', transferCanceled, false);\n\nxhr.open();\nfunction updateProgress(e) {\n  if (e.lengthComputable) {\n    var percentComplete = e.loaded / e.total;\n  } else {\n    console.log('不能计算进度');\n  }\n}\n\nfunction transferComplete(e) {\n  console.log('传输结束');\n}\n\nfunction transferFailed(evt) {\n  console.log('传输过程中发生错误');\n}\n\nfunction transferCanceled(evt) {\n  console.log('用户取消了传输');\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面是下载过程的进度事件，还存在上传过程的进度事件。这时所有监听函数都要放在"),t("code",[this._v("XMLHttpRequest.upload")]),this._v("对象上面。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var xhr = new XMLHttpRequest();\n\nxhr.upload.addEventListener('progress', updateProgress, false);\nxhr.upload.addEventListener('load', transferComplete, false);\nxhr.upload.addEventListener('error', transferFailed, false);\nxhr.upload.addEventListener('abort', transferCanceled, false);\n\nxhr.open();\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_12-拖拉事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-拖拉事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 12. 拖拉事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("拖拉的对象有好几种，包括元素节点、图片、链接、选中的文字等等。在网页中，除了元素节点默认不可以拖拉，其他（图片、链接、选中的文字）都是可以直接拖拉的。为了让元素节点可拖拉，可以将该节点的"),t("code",[this._v("draggable")]),this._v("属性设为"),t("code",[this._v("true")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<div draggable="true">\n  此区域可拖拉\n</div>\n')])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("draggable")]),e._v("属性可用于任何元素节点，但是图片（"),n("code",[e._v("<img>")]),e._v("）和链接（"),n("code",[e._v("<a>")]),e._v("）不加这个属性，就可以拖拉。对于它们，用到这个属性的时候，往往是将其设为"),n("code",[e._v("false")]),e._v("，防止拖拉这两种元素。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("注意，一旦某个元素节点的"),t("code",[this._v("draggable")]),this._v("属性设为"),t("code",[this._v("true")]),this._v("，就无法再用鼠标选中该节点内部的文字或子节点了。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[n("code",[e._v("drag")]),e._v("：拖拉过程中，在被拖拉的节点上持续触发（相隔几百毫秒）。")]),e._v(" "),n("li",[n("code",[e._v("dragstart")]),e._v("：用户开始拖拉时，在被拖拉的节点上触发，该事件的"),n("code",[e._v("target")]),e._v("属性是被拖拉的节点。通常应该在这个事件的监听函数中，指定拖拉的数据。")]),e._v(" "),n("li",[n("code",[e._v("dragend")]),e._v("：拖拉结束时（释放鼠标键或按下 ESC 键）在被拖拉的节点上触发，该事件的"),n("code",[e._v("target")]),e._v("属性是被拖拉的节点。它与"),n("code",[e._v("dragstart")]),e._v("事件，在同一个节点上触发。不管拖拉是否跨窗口，或者中途被取消，"),n("code",[e._v("dragend")]),e._v("事件总是会触发的。")]),e._v(" "),n("li",[n("code",[e._v("dragenter")]),e._v("：拖拉进入当前节点时，在当前节点上触发一次，该事件的"),n("code",[e._v("target")]),e._v("属性是当前节点。通常应该在这个事件的监听函数中，指定是否允许在当前节点放下（drop）拖拉的数据。如果当前节点没有该事件的监听函数，或者监听函数不执行任何操作，就意味着不允许在当前节点放下数据。在视觉上显示拖拉进入当前节点，也是在这个事件的监听函数中设置。")]),e._v(" "),n("li",[n("code",[e._v("dragover")]),e._v("：拖拉到当前节点上方时，在当前节点上持续触发（相隔几百毫秒），该事件的"),n("code",[e._v("target")]),e._v("属性是当前节点。该事件与"),n("code",[e._v("dragenter")]),e._v("事件的区别是，"),n("code",[e._v("dragenter")]),e._v("事件在进入该节点时触发，然后只要没有离开这个节点，"),n("code",[e._v("dragover")]),e._v("事件会持续触发。")]),e._v(" "),n("li",[n("code",[e._v("dragleave")]),e._v("：拖拉操作离开当前节点范围时，在当前节点上触发，该事件的"),n("code",[e._v("target")]),e._v("属性是当前节点。如果要在视觉上显示拖拉离开操作当前节点，就在这个事件的监听函数中设置。")]),e._v(" "),n("li",[n("code",[e._v("drop")]),e._v("：被拖拉的节点或选中的文本，释放到目标节点时，在目标节点上触发。注意，如果当前节点不允许"),n("code",[e._v("drop")]),e._v("，即使在该节点上方松开鼠标键，也不会触发该事件。如果用户按下 ESC 键，取消这个操作，也不会触发该事件。该事件的监听函数负责取出拖拉数据，并进行相关处理。")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<div id=\"one\" draggable=\"true\">可拖动div</div>\n<div> <a href=\"\">dadasdasdsadasdasds</a> </div>\n<script>\n    var div = document.getElementById(\"one\");\n    div.addEventListener('dragstart', function (e) {\n        this.style.backgroundColor = 'red';\n    }, false);\n    div.addEventListener('dragend', function (e) {\n        this.style.backgroundColor = 'green';\n    }, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，"),t("code",[this._v("div")]),this._v("节点被拖动时，背景色会变为红色，拖动结束，又变回绿色。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<style> .dropzone {border: 1px solid; min-height: 100px;} </style>\n<div class=\"dropzone\">\n    <div id=\"dragged\" draggable=\"true\"> 该节点可拖拉 </div>\n</div>\n<div class=\"dropzone\"></div>\n<div class=\"dropzone\"></div>\n<div class=\"dropzone\"></div>\n<script>\n    var dragged = document.getElementById(\"dragged\");\n    // 开始拖动时触发：拖动的节点字体颜色变红，背景色变通欧明\n    document.addEventListener('dragstart', function (event) {\n        dragged = event.target;\t// 保存被拖拉节点\n        event.target.style.opacity = 0.5;// 被拖拉节点的背景色变透明\n        event.target.style.color = \"yellow\";\n    }, false);\n    // 拖动结束后触发：拖动的节点字体颜色恢复，背景色恢复\n    document.addEventListener('dragend', function (event) {\n        event.target.style.opacity = '';// 被拖拉节点的背景色恢复正常\n        event.target.style.color = \"\";\n    }, false);\n    // 拖拉到当前节点上方时，在当前节点上持续触发\n    document.addEventListener('dragover', function (event) {\n        event.preventDefault();// 防止拖拉效果被重置，允许被拖拉的节点放入目标节点\n    }, false);\n    // 拖拉进入当前节点时，在当前节点上触发一次\n    document.addEventListener('dragenter', function (event) {\n        // 目标节点的背景色变紫色\n        // 由于该事件会冒泡，所以要过滤节点\n        if (event.target.className === 'dropzone') {\n            event.target.style.background = 'purple';\n        }\n    }, false);\n    // 拖拉操作离开当前节点范围时，在当前节点上触发\n    document.addEventListener('dragleave', function( event ) {\n        // 目标节点的背景色恢复原样\n        if (event.target.className === 'dropzone') {\n            event.target.style.background = '';\n        }\n    }, false);\n    // 被拖拉的节点或选中的文本，释放到目标节点时，在目标节点上触发\n    document.addEventListener('drop', function( event ) {\n        // 防止事件默认行为（比如某些元素节点上可以打开链接），\n        event.preventDefault();\n        if (event.target.className === 'dropzone') {\n            // 恢复目标节点背景色\n            event.target.style.background = '';\n            // 将被拖拉节点插入目标节点\n            dragged.parentNode.removeChild(dragged);\n            event.target.appendChild( dragged );\n        }\n    }, false);\n<\/script>\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[e._v("拖拉过程只触发以上这些拖拉事件，尽管鼠标在移动，但是鼠标事件不会触发。")]),e._v(" "),n("li",[e._v("将文件从操作系统拖拉进浏览器，不会触发"),n("code",[e._v("dragstart")]),e._v("和"),n("code",[e._v("dragend")]),e._v("事件。")]),e._v(" "),n("li",[n("code",[e._v("dragenter")]),e._v("和"),n("code",[e._v("dragover")]),e._v("事件的监听函数，用来取出拖拉的数据（即允许放下被拖拉的元素）。由于网页的大部分区域不适合作为放下拖拉元素的目标节点，所以这两个事件的默认设置为当前节点不允许接受被拖拉的元素。如果想要在目标节点上放下的数据，首先必须阻止这两个事件的默认行为。")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<div ondragover="return false">\n<div ondragover="event.preventDefault()">\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，如果不取消拖拉事件或者阻止默认行为，就不能在"),t("code",[this._v("div")]),this._v("节点上放下被拖拉的节点。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_13-dragevent-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-dragevent-接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 13. DragEvent 接口")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("拖拉事件都继承了"),t("code",[this._v("DragEvent")]),this._v("接口，这个接口又继承了"),t("code",[this._v("MouseEvent")]),this._v("接口和"),t("code",[this._v("Event")]),this._v("接口。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("浏览器原生提供一个"),t("code",[this._v("DragEvent()")]),this._v("构造函数，用来生成拖拉事件的实例对象。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("new DragEvent(type, options)\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("DragEvent()")]),e._v("构造函数接受两个参数，第一个参数是字符串，表示事件的类型，该参数必须；第二个参数是事件的配置对象，用来设置事件的属性，该参数可选。配置对象除了接受"),n("code",[e._v("MouseEvent")]),e._v("接口和"),n("code",[e._v("Event")]),e._v("接口的配置属性，还可以设置"),n("code",[e._v("dataTransfer")]),e._v("属性要么是"),n("code",[e._v("null")]),e._v("，要么是一个"),n("code",[e._v("DataTransfer")]),e._v("接口的实例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("DataTransfer")]),this._v("的实例对象用来读写拖拉事件中传输的数据")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_14-datatransfer-接口概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-datatransfer-接口概述","aria-hidden":"true"}},[this._v("#")]),this._v(" 14. DataTransfer 接口概述")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("所有拖拉事件的实例都有一个"),t("code",[this._v("DragEvent.dataTransfer")]),this._v("属性，用来读写需要传递的数据。这个属性的值是一个"),t("code",[this._v("DataTransfer")]),this._v("接口的实例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("浏览器原生提供一个"),t("code",[this._v("DataTransfer()")]),this._v("构造函数，用来生成"),t("code",[this._v("DataTransfer")]),this._v("实例对象。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var dataTrans = new DataTransfer();\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("DataTransfer()")]),this._v("构造函数不接受参数。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("拖拉的数据分成两方面：数据的种类（又称格式）和数据的值。数据的种类是一个 MIME 字符串（比如"),t("code",[this._v("text/plain")]),this._v("、"),t("code",[this._v("image/jpeg")]),this._v("），数据的值是一个字符串。一般来说，如果拖拉一段文本，则数据默认就是那段文本；如果拖拉一个链接，则数据默认就是链接的 URL。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("拖拉事件开始时，开发者可以提供数据类型和数据值。拖拉过程中，开发者通过"),t("code",[this._v("dragenter")]),this._v("和"),t("code",[this._v("dragover")]),this._v("事件的监听函数，检查数据类型，以确定是否允许放下（drop）被拖拉的对象。比如，在只允许放下链接的区域，检查拖拉的数据类型是否为"),t("code",[this._v("text/uri-list")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("发生"),t("code",[this._v("drop")]),this._v("事件时，监听函数取出拖拉的数据，对其进行处理。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_15-datatransfer-的实例属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-datatransfer-的实例属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 15.DataTransfer 的实例属性")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_15-1-datatransfer-dropeffect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-datatransfer-dropeffect","aria-hidden":"true"}},[this._v("#")]),this._v(" 15.1 DataTransfer.dropEffect")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("DataTransfer.dropEffect")]),this._v("属性用来设置放下（drop）被拖拉节点时的效果，会影响到拖拉经过相关区域时鼠标的形状。它可能取下面的值。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("ul",[t("li",[this._v("copy：复制被拖拉的节点")]),this._v(" "),t("li",[this._v("move：移动被拖拉的节点")]),this._v(" "),t("li",[this._v("link：创建指向被拖拉的节点的链接")]),this._v(" "),t("li",[this._v("none：无法放下被拖拉的节点")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("target.addEventListener('dragover', function (e) {\n  e.preventDefault();\n  e.stopPropagation();\n  e.dataTransfer.dropEffect = 'copy';\n});\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，被拖拉元素一旦"),t("code",[this._v("drop")]),this._v("，接受的区域会复制该节点。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("dropEffect")]),e._v("属性一般在"),n("code",[e._v("dragenter")]),e._v("和"),n("code",[e._v("dragover")]),e._v("事件的监听函数中设置，对于"),n("code",[e._v("dragstart")]),e._v("、"),n("code",[e._v("drag")]),e._v("、"),n("code",[e._v("dragleave")]),e._v("这三个事件，该属性不起作用。因为该属性只对接受被拖拉的节点的区域有效，对被拖拉的节点本身是无效的。进入目标区域后，拖拉行为会初始化成设定的效果。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<div id="one" draggable="true">可拖动div</div>\n<div> <a href="">dadasdasdsadasdasds</a> </div>\n<script>\n    var div = document.getElementById("one");\n    div.addEventListener(\'dragover\', function (e) {\n        console.log(e.dataTransfer.dropEffect)\n    }, false);\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_15-2-datatransfer-effectallowed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-datatransfer-effectallowed","aria-hidden":"true"}},[this._v("#")]),this._v(" 15.2 DataTransfer.effectAllowed")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("DataTransfer.effectAllowed")]),this._v("属性设置本次拖拉中允许的效果。它可能取下面的值。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[e._v("copy：复制被拖拉的节点")]),e._v(" "),n("li",[e._v("move：移动被拖拉的节点")]),e._v(" "),n("li",[e._v("link：创建指向被拖拉节点的链接")]),e._v(" "),n("li",[e._v("copyLink：允许"),n("code",[e._v("copy")]),e._v("或"),n("code",[e._v("link")])]),e._v(" "),n("li",[e._v("copyMove：允许"),n("code",[e._v("copy")]),e._v("或"),n("code",[e._v("move")])]),e._v(" "),n("li",[e._v("linkMove：允许"),n("code",[e._v("link")]),e._v("或"),n("code",[e._v("move")])]),e._v(" "),n("li",[e._v("all：允许所有效果")]),e._v(" "),n("li",[e._v("none：无法放下被拖拉的节点")]),e._v(" "),n("li",[e._v("uninitialized：默认值，等同于"),n("code",[e._v("all")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这个属性与"),t("code",[this._v("dropEffect")]),this._v("属性是同一件事的两个方面。前者设置被拖拉的节点允许的效果，后者设置接受拖拉的区域的效果，它们往往配合使用。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("dragstart")]),this._v("事件的监听函数，可以用来设置这个属性。其他事件的监听函数里面设置这个属性是无效的。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("source.addEventListener('dragstart', function (e) {\n  e.dataTransfer.effectAllowed = 'move';\n});\n\ntarget.addEventListener('dragover', function (e) {\n  ev.dataTransfer.dropEffect = 'move';\n});\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("只要"),n("code",[e._v("dropEffect")]),e._v("属性和"),n("code",[e._v("effectAllowed")]),e._v("属性之中，有一个为"),n("code",[e._v("none")]),e._v("，就无法在目标节点上完成"),n("code",[e._v("drop")]),e._v("操作。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_15-3-datatransfer-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-datatransfer-files","aria-hidden":"true"}},[this._v("#")]),this._v(" 15.3 DataTransfer.files")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("DataTransfer.files")]),this._v("属性是一个 FileList 对象，包含一组本地文件，可以用来在拖拉操作中传送。如果本次拖拉不涉及文件，则该属性为空的 FileList 对象。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<div id="output" style="min-height: 200px;border: 1px solid black;">\n    文件拖拉到这里\n</div>\n<script>\n    var div = document.getElementById(\'output\');\n    div.addEventListener("dragenter", function( event ) {\n        div.textContent = \'\';\n        event.stopPropagation();\n        event.preventDefault();\n    }, false);\n    div.addEventListener("dragover", function( event ) {\n        event.stopPropagation();\n        event.preventDefault();\n    }, false);\n    div.addEventListener("drop", function( event ) {\n        event.stopPropagation();\n        event.preventDefault();\n        var files = event.dataTransfer.files;\n        for (var i = 0; i < files.length; i++) {\n            div.textContent += files[i].name + \' \' + files[i].size + \'字节\\n\';\n        }\n    }, false);\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，通过"),t("code",[this._v("dataTransfer.files")]),this._v("属性读取被拖拉的文件的信息。如果想要读取文件内容，就要使用"),t("code",[this._v("FileReader")]),this._v("对象。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("div.addEventListener('drop', function(e) {\n  e.preventDefault();\n  e.stopPropagation();\n  var fileList = e.dataTransfer.files;\n  if (fileList.length > 0) {\n    var file = fileList[0];\n    var reader = new FileReader();\n    reader.onloadend = function(e) {\n      if (e.target.readyState === FileReader.DONE) {\n        var content = reader.result;\n        div.innerHTML = 'File: ' + file.name + '\\n\\n' + content;\n      }\n    }\n    reader.readAsBinaryString(file);\n  }\n});\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_15-4-datatransfer-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-4-datatransfer-types","aria-hidden":"true"}},[this._v("#")]),this._v(" 15.4 DataTransfer.types")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("DataTransfer.types")]),this._v("属性是一个只读的数组，每个成员是一个字符串，里面是拖拉的数据格式（通常是 MIME 值）。比如，如果拖拉的是文字，对应的成员就是"),t("code",[this._v("text/plain")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下面是一个例子，通过检查"),t("code",[this._v("dataTransfer")]),this._v("属性的类型，决定是否允许在当前节点执行"),t("code",[this._v("drop")]),this._v("操作。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function contains(list, value){\n  for (var i = 0; i < list.length; ++i) {\n    if(list[i] === value) return true;\n  }\n  return false;\n}\n\nfunction doDragOver(event) {\n  var isLink = contains(event.dataTransfer.types, 'text/uri-list');\n  if (isLink) event.preventDefault();\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_15-5-datatransfer-items"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-5-datatransfer-items","aria-hidden":"true"}},[this._v("#")]),this._v(" 15.5 DataTransfer.items")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("DataTransfer.items")]),this._v("属性返回一个类似数组的只读对象（DataTransferItemList 实例），每个成员就是本次拖拉的一个对象（DataTransferItem 实例）。如果本次拖拉不包含对象，则返回一个空对象。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[n("code",[e._v("length")]),e._v("：返回成员的数量")]),e._v(" "),n("li",[n("code",[e._v("add(data, type)")]),e._v("：增加一个指定内容和类型（比如"),n("code",[e._v("text/html")]),e._v("和"),n("code",[e._v("text/plain")]),e._v("）的字符串作为成员")]),e._v(" "),n("li",[n("code",[e._v("add(file)")]),e._v("："),n("code",[e._v("add")]),e._v("方法的另一种用法，增加一个文件作为成员")]),e._v(" "),n("li",[n("code",[e._v("remove(index)")]),e._v("：移除指定位置的成员")]),e._v(" "),n("li",[n("code",[e._v("clear()")]),e._v("：移除所有的成员")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[n("code",[e._v("kind")]),e._v("：返回成员的种类（"),n("code",[e._v("string")]),e._v("还是"),n("code",[e._v("file")]),e._v("）。")]),e._v(" "),n("li",[n("code",[e._v("type")]),e._v("：返回成员的类型（通常是 MIME 值）。")]),e._v(" "),n("li",[n("code",[e._v("getAsFile()")]),e._v("：如果被拖拉是文件，返回该文件，否则返回"),n("code",[e._v("null")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("getAsString(callback)")]),e._v("：如果被拖拉的是字符串，将该字符传入指定的回调函数处理。该方法是异步的，所以需要传入回调函数。")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<div id=\"output\" style=\"min-height: 200px;border: 1px solid black;\">\n    文件拖拉到这里\n</div>\n<script>\n    var div = document.getElementById('output');\n    div.addEventListener(\"dragenter\", function( event ) {\n        div.textContent = '';\n        event.stopPropagation();\n        event.preventDefault();\n    }, false);\n    div.addEventListener(\"dragover\", function( event ) {\n        event.stopPropagation();\n        event.preventDefault();\n    }, false);\n    div.addEventListener('drop', function (e) {\n        e.preventDefault();\n        if (e.dataTransfer.items != null) {\n            for (var i = 0; i < e.dataTransfer.items.length; i++) {\n                console.log(e.dataTransfer.items[i].kind + ': ' + e.dataTransfer.items[i].type);\n            }\n        }\n    });\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_16-datatransfer-的实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-datatransfer-的实例方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 16. DataTransfer 的实例方法")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_16-1-datatransfer-setdata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-1-datatransfer-setdata","aria-hidden":"true"}},[this._v("#")]),this._v(" 16.1 DataTransfer.setData()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("DataTransfer.setData()")]),this._v("方法用来设置拖拉事件所带有的数据。该方法没有返回值。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("event.dataTransfer.setData('text/plain', 'Text to drag');\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("该方法接受两个参数，都是字符串。第一个参数表示数据类型（比如"),t("code",[this._v("text/plain")]),this._v("），第二个参数是具体数据。如果指定类型的数据在"),t("code",[this._v("dataTransfer")]),this._v("属性不存在，那么这些数据将被加入，否则原有的数据将被新数据替换。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果是拖拉文本框或者拖拉选中的文本，会默认将对应的文本数据，添加到"),t("code",[this._v("dataTransfer")]),this._v("属性，不用手动指定。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<div draggable="true">\n  aaa\n</div>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，拖拉这个"),t("code",[this._v("<div>")]),this._v("元素会自动带上文本数据"),t("code",[this._v("aaa")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("使用"),t("code",[this._v("setData")]),this._v("方法，可以替换到原有数据。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<div\n  draggable=\"true\"\n  ondragstart=\"event.dataTransfer.setData('text/plain', 'bbb')\"\n>\n  aaa\n</div>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，拖拉数据实际上是"),t("code",[this._v("bbb")]),this._v("，而不是"),t("code",[this._v("aaa")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下面是添加其他类型的数据。由于"),t("code",[this._v("text/plain")]),this._v("是最普遍支持的格式，为了保证兼容性，建议最后总是保存一份纯文本格式的数据。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var dt = event.dataTransfer;\n\n// 添加链接\ndt.setData('text/uri-list', 'http://www.example.com');\ndt.setData('text/plain', 'http://www.example.com');\n\n// 添加 HTML 代码\ndt.setData('text/html', 'Hello there, <strong>stranger</strong>');\ndt.setData('text/plain', 'Hello there, <strong>stranger</strong>');\n\n// 添加图像的 URL\ndt.setData('text/uri-list', imageurl);\ndt.setData('text/plain', imageurl);\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var dt = event.dataTransfer;\ndt.setData('application/x-bookmark', bookmarkString);\ndt.setData('text/uri-list', 'http://www.example.com');\ndt.setData('text/plain', 'http://www.example.com');\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，通过在同一个事件上面，存放三种类型的数据，使得拖拉事件可以在不同的对象上面，"),t("code",[this._v("drop")]),this._v("不同的值。注意，第一种格式是一个自定义格式，浏览器默认无法读取，这意味着，只有某个部署了特定代码的节点，才可能"),t("code",[this._v("drop")]),this._v("（读取到）这个数据。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_16-2-datatransfer-getdata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-2-datatransfer-getdata","aria-hidden":"true"}},[this._v("#")]),this._v(" 16.2 DataTransfer.getData()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("DataTransfer.getData()")]),this._v("方法接受一个字符串（表示数据类型）作为参数，返回事件所带的指定类型的数据（通常是用"),t("code",[this._v("setData")]),this._v("方法添加的数据）。如果指定类型的数据不存在，则返回空字符串。通常只有"),t("code",[this._v("drop")]),this._v("事件触发后，才能取出数据。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下面是一个"),t("code",[this._v("drop")]),this._v("事件的监听函数，用来取出指定类型的数据。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function onDrop(event) {\n  var data = event.dataTransfer.getData('text/plain');\n  event.target.textContent = data;\n  event.preventDefault();\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("getData")]),this._v("方法返回的是一个字符串，如果其中包含多项数据，就必须手动解析。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function doDrop(event) {\n  var lines = event.dataTransfer.getData('text/uri-list').split('\\n');\n  for (let line of lines) {\n    let link = document.createElement('a');\n    link.href = line;\n    link.textContent = line;\n    event.target.appendChild(link);\n  }\n  event.preventDefault();\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，"),t("code",[this._v("getData")]),this._v("方法返回的是一组链接，就必须自行解析。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("类型值指定为"),t("code",[this._v("URL")]),this._v("，可以取出第一个有效链接。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var link = event.dataTransfer.getData('URL');\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function doDrop(event) {\n  var types = event.dataTransfer.types;\n  var supportedTypes = ['text/uri-list', 'text/plain'];\n  types = supportedTypes.filter(function (value) { types.includes(value) });\n  if (types.length) {\n    var data = event.dataTransfer.getData(types[0]);\n  }\n  event.preventDefault();\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_16-3-datatransfer-cleardata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-3-datatransfer-cleardata","aria-hidden":"true"}},[this._v("#")]),this._v(" 16.3 DataTransfer.clearData()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("DataTransfer.clearData()")]),this._v("方法接受一个字符串（表示数据类型）作为参数，删除事件所带的指定类型的数据。如果没有指定类型，则删除所有数据。如果指定类型不存在，则调用该方法不会产生任何效果。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("event.dataTransfer.clearData('text/uri-list');\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码清除事件所带的"),t("code",[this._v("text/uri-list")]),this._v("类型的数据。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("该方法不会移除拖拉的文件，因此调用该方法后，"),t("code",[this._v("DataTransfer.types")]),this._v("属性可能依然会返回"),t("code",[this._v("Files")]),this._v("类型（前提是存在文件拖拉）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("注意，该方法只能在"),t("code",[this._v("dragstart")]),this._v("事件的监听函数之中使用，因为这是拖拉操作的数据唯一可写的时机。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_16-4-datatransfer-setdragimage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-4-datatransfer-setdragimage","aria-hidden":"true"}},[this._v("#")]),this._v(" 16.4 DataTransfer.setDragImage()")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("拖动过程中（"),t("code",[this._v("dragstart")]),this._v("事件触发后），浏览器会显示一张图片跟随鼠标一起移动，表示被拖动的节点。这张图片是自动创造的，通常显示为被拖动节点的外观，不需要自己动手设置。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("DataTransfer.setDragImage()")]),e._v("方法可以自定义这张图片。它接受三个参数。第一个是"),n("code",[e._v("<img>")]),e._v("节点或者"),n("code",[e._v("<canvas>")]),e._v("节点，如果省略或为"),n("code",[e._v("null")]),e._v("，则使用被拖动的节点的外观；第二个和第三个参数为鼠标相对于该图片左上角的横坐标和右坐标。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<div id=\"drag-with-image\" class=\"dragdemo\" draggable=\"true\">\n    drag me\n</div>\n<script>\n    var div = document.getElementById('drag-with-image');\n    div.addEventListener('dragstart', function (e) {\n        var img = document.createElement('img');\n        img.src = 'http://path/to/img';\n        e.dataTransfer.setDragImage(img, 0, 0);\n    }, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_17-触摸操作概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-触摸操作概述","aria-hidden":"true"}},[this._v("#")]),this._v(" 17. 触摸操作概述")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("ul",[t("li",[this._v("Touch：一个触摸点")]),this._v(" "),t("li",[this._v("TouchList：多个触摸点的集合")]),this._v(" "),t("li",[this._v("TouchEvent：触摸引发的事件实例")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Touch")]),this._v("接口的实例对象用来触摸点（一根手指或者一根触摸笔），包括位置、大小、形状、压力、目标元素等属性。有时，触摸动作由多个触摸点（多根手指）组成，多个触摸点的集合由"),t("code",[this._v("TouchList")]),this._v("接口的实例对象表示。"),t("code",[this._v("TouchEvent")]),this._v("接口的实例对象代表由触摸引发的事件，只有触摸屏才会引发这一类事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("很多时候，触摸事件和鼠标事件同时触发，即使这个时候并没有用到鼠标。这是为了让那些只定义鼠标事件、没有定义触摸事件的代码，在触摸屏的情况下仍然能用。如果想避免这种情况，可以用"),t("code",[this._v("event.preventDefault")]),this._v("方法阻止发出鼠标事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_18-touch接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-touch接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 18. Touch接口")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_18-1-touch接口概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-1-touch接口概述","aria-hidden":"true"}},[this._v("#")]),this._v(" 18.1 Touch接口概述")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("浏览器原生提供"),t("code",[this._v("Touch")]),this._v("构造函数，用来生成"),t("code",[this._v("Touch")]),this._v("实例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var touch = new Touch(touchOptions);\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Touch")]),this._v("构造函数接受一个配置对象作为参数，它有以下属性。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("blockquote",[n("ul",[n("li",[n("code",[e._v("identifier")]),e._v("：必需，类型为整数，表示触摸点的唯一 ID。")]),e._v(" "),n("li",[n("code",[e._v("target")]),e._v("：必需，类型为元素节点，表示触摸点开始时所在的网页元素。")]),e._v(" "),n("li",[n("code",[e._v("clientX")]),e._v("：可选，类型为数值，表示触摸点相对于浏览器窗口左上角的水平距离，默认为0。")]),e._v(" "),n("li",[n("code",[e._v("clientY")]),e._v("：可选，类型为数值，表示触摸点相对于浏览器窗口左上角的垂直距离，默认为0。")]),e._v(" "),n("li",[n("code",[e._v("screenX")]),e._v("：可选，类型为数值，表示触摸点相对于屏幕左上角的水平距离，默认为0。")]),e._v(" "),n("li",[n("code",[e._v("screenY")]),e._v("：可选，类型为数值，表示触摸点相对于屏幕左上角的垂直距离，默认为0。")]),e._v(" "),n("li",[n("code",[e._v("pageX")]),e._v("：可选，类型为数值，表示触摸点相对于网页左上角的水平位置（即包括页面的滚动距离），默认为0。")]),e._v(" "),n("li",[n("code",[e._v("pageY")]),e._v("：可选，类型为数值，表示触摸点相对于网页左上角的垂直位置（即包括页面的滚动距离），默认为0。")]),e._v(" "),n("li",[n("code",[e._v("radiusX")]),e._v("：可选，类型为数值，表示触摸点周围受到影响的椭圆范围的 X 轴半径，默认为0。")]),e._v(" "),n("li",[n("code",[e._v("radiusY")]),e._v("：可选：类型为数值，表示触摸点周围受到影响的椭圆范围的 Y 轴半径，默认为0。")]),e._v(" "),n("li",[n("code",[e._v("rotationAngle")]),e._v("：可选，类型为数值，表示触摸区域的椭圆的旋转角度，单位为度数，在0到90度之间，默认值为0。")]),e._v(" "),n("li",[n("code",[e._v("force")]),e._v("：可选，类型为数值，范围在"),n("code",[e._v("0")]),e._v("到"),n("code",[e._v("1")]),e._v("之间，表示触摸压力。"),n("code",[e._v("0")]),e._v("代表没有压力，"),n("code",[e._v("1")]),e._v("代表硬件所能识别的最大压力，默认为"),n("code",[e._v("0")]),e._v("。")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_18-2-touch-接口的实例属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-2-touch-接口的实例属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 18.2 Touch 接口的实例属性")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("（1）Touch.identifier")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Touch.identifier")]),this._v("属性返回一个整数，表示触摸点的唯一 ID。这个值在整个触摸过程保持不变，直到触摸事件结束。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("someElement.addEventListener('touchmove', function (e) {\n  for (var i = 0; i < e.changedTouches.length; i++) {\n    console.log(e.changedTouches[i].identifier);\n  }\n}, false);\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("（2）Touch.screenX，Touch.screenY，Touch.clientX，Touch.clientY，pageX，pageY")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Touch.screenX")]),this._v("属性和"),t("code",[this._v("Touch.screenY")]),this._v("属性，分别表示触摸点相对于屏幕左上角的横坐标和纵坐标，与页面是否滚动无关。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Touch.clientX")]),this._v("属性和"),t("code",[this._v("Touch.clientY")]),this._v("属性，分别表示触摸点相对于浏览器视口左上角的横坐标和纵坐标，与页面是否滚动无关。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Touch.pageX")]),this._v("属性和"),t("code",[this._v("Touch.pageY")]),this._v("属性，分别表示触摸点相对于当前页面左上角的横坐标和纵坐标，包含了页面滚动带来的位移。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("（3）Touch.radiusX，Touch.radiusY，Touch.rotationAngle")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Touch.radiusX")]),this._v("属性和"),t("code",[this._v("Touch.radiusY")]),this._v("属性，分别返回触摸点周围受到影响的椭圆范围的 X 轴半径和 Y 轴半径，单位为像素。乘以 2 就可以得到触摸范围的宽度和高度。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Touch.rotationAngle")]),this._v("属性表示触摸区域的椭圆的旋转角度，单位为度数，在"),t("code",[this._v("0")]),this._v("到"),t("code",[this._v("90")]),this._v("度之间。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("div.addEventListener('touchstart', rotate);\ndiv.addEventListener('touchmove', rotate);\ndiv.addEventListener('touchend', rotate);\n\nfunction rotate(e) {\n  var touch = e.changedTouches.item(0);\n  e.preventDefault();\n\n  src.style.width = touch.radiusX * 2 + 'px';\n  src.style.height = touch.radiusY * 2 + 'px';\n  src.style.transform = 'rotate(' + touch.rotationAngle + 'deg)';\n};\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("（4）Touch.force")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("Touch.force")]),e._v("属性返回一个"),n("code",[e._v("0")]),e._v("到"),n("code",[e._v("1")]),e._v("之间的数值，表示触摸压力。"),n("code",[e._v("0")]),e._v("代表没有压力，"),n("code",[e._v("1")]),e._v("代表硬件所能识别的最大压力。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("（5）Touch.target")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("Touch.target")]),this._v("属性返回一个元素节点，代表触摸发生时所在的那个元素节点。即使触摸点已经离开了这个节点，该属性依然不变。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<style>\n    html,body {height: 100%}\n</style>\n<script>\n    document.body.addEventListener(\'touchstart\', function (e) {\n        console.log("identifier: ", e.touches[0].identifier)\n        console.log("screenX: ", e.touches[0].screenX)\n        console.log("screenY: ", e.touches[0].screenY)\n        console.log("clientX: ", e.touches[0].clientX)\n        console.log("clientY: ", e.touches[0].clientY)\n        console.log("pageX: ", e.touches[0].pageX)\n        console.log("pageY: ", e.touches[0].pageY)\n        console.log("radiusX: ", e.touches[0].radiusX)\n        console.log("radiusY: ", e.touches[0].radiusY)\n        console.log("rotationAngle: ", e.touches[0].rotationAngle)\n        console.log("force : ", e.touches[0].force )\n        console.log("target  : ", e.touches[0].target)\n    }, false);\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_19-touchlist-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-touchlist-接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 19. TouchList 接口")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("TouchList")]),e._v("接口表示一组触摸点的集合。它的实例是一个类似数组的对象，成员是"),n("code",[e._v("Touch")]),e._v("的实例对象，表示所有触摸点。用户用三根手指触摸，产生的"),n("code",[e._v("TouchList")]),e._v("实例就会包含三个成员，每根手指的触摸点对应一个"),n("code",[e._v("Touch")]),e._v("实例对象。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("它的实例主要通过触摸事件的"),t("code",[this._v("TouchEvent.touches")]),this._v("、"),t("code",[this._v("TouchEvent.changedTouches")]),this._v("、"),t("code",[this._v("TouchEvent.targetTouches")]),this._v("这几个属性获取。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("code",[this._v("TouchList.length")]),this._v("：数值，表示成员数量（即触摸点的数量）。")]),this._v(" "),t("li",[t("code",[this._v("TouchList.item()")]),this._v("：返回指定位置的成员，它的参数是该成员的位置编号（从零开始）。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<style>\n    html,body {height: 100%}\n</style>\n<script>\n    document.body.addEventListener(\'touchstart\', function (e) {\n        console.log("类型: ",  e.touches instanceof TouchList )\t// true\n        console.log("length: ", e.touches.length)\t// 1\n        console.log("item(): ", e.touches.item(0))\t// Touch {identifier: 0, target\n    }, false);\n    // Chrome 版本 66.0.3359.181（正式版本） （64 位）\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_20-touchevent-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-touchevent-接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 20. TouchEvent 接口")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_20-1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-1-概述","aria-hidden":"true"}},[this._v("#")]),this._v(" 20.1 概述")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("浏览器原生提供"),t("code",[this._v("TouchEvent()")]),this._v("构造函数，用来生成触摸事件的实例。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("new TouchEvent(type, options)\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("TouchEvent()")]),this._v("构造函数可以接受两个参数，第一个参数是字符串，表示事件类型；第二个参数是事件的配置对象，该参数是可选的，对象的所有属性也是可选的。除了"),t("code",[this._v("Event")]),this._v("接口的配置属性，该接口还有一些自己的配置属性。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("touches")]),e._v("："),n("code",[e._v("TouchList")]),e._v("实例，代表所有的当前处于活跃状态的触摸点，默认值是一个空数组"),n("code",[e._v("[]")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("targetTouches")]),e._v("："),n("code",[e._v("TouchList")]),e._v("实例，代表所有处在触摸的目标元素节点内部、且仍然处于活动状态的触摸点，默认值是一个空数组"),n("code",[e._v("[]")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("changedTouches")]),e._v("："),n("code",[e._v("TouchList")]),e._v("实例，代表本次触摸事件的相关触摸点，默认值是一个空数组"),n("code",[e._v("[]")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("ctrlKey")]),e._v("：布尔值，表示 Ctrl 键是否同时按下，默认值为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("shiftKey")]),e._v("：布尔值，表示 Shift 键是否同时按下，默认值为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("altKey")]),e._v("：布尔值，表示 Alt 键是否同时按下，默认值为"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("metaKey")]),e._v("：布尔值，表示 Meta 键（或 Windows 键）是否同时按下，默认值为"),n("code",[e._v("false")]),e._v("。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_20-2-实例属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-2-实例属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 20.2 实例属性")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("TouchEvent 接口的实例具有"),t("code",[this._v("Event")]),this._v("实例的所有属性和方法，此外还有一些它自己的实例属性，这些属性全部都是只读。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("（1）TouchEvent.altKey，TouchEvent.ctrlKey，TouchEvent.shiftKey，TouchEvent.metaKey")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("TouchEvent.altKey")]),e._v("：布尔值，表示触摸时是否按下了 Alt 键。")]),e._v(" "),n("li",[n("code",[e._v("TouchEvent.ctrlKey")]),e._v("：布尔值，表示触摸时是否按下了 Ctrl 键。")]),e._v(" "),n("li",[n("code",[e._v("TouchEvent.shiftKey")]),e._v("：布尔值：表示触摸时是否按下了 Shift 键。")]),e._v(" "),n("li",[n("code",[e._v("TouchEvent.metaKey")]),e._v("：布尔值，表示触摸时是否按下了 Meta 键（或 Windows 键）。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<style>\n    html,body {height: 100%}\n</style>\n<script>\n    document.body.addEventListener('touchstart', function (e) {\n        console.log('altKey = ' + e.altKey);\n        console.log('ctrlKey = ' + e.ctrlKey);\n        console.log('metaKey = ' + e.metaKey);\n        console.log('shiftKey = ' + e.shiftKey);\n    }, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("（2）TouchEvent.changedTouches")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("TouchEvent.changedTouches")]),this._v("属性返回一个"),t("code",[this._v("TouchList")]),this._v("实例，成员是一组"),t("code",[this._v("Touch")]),this._v("实例对象，表示本次触摸事件的相关触摸点。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("touchstart")]),e._v("事件：被激活的触摸点")]),e._v(" "),n("li",[n("code",[e._v("touchmove")]),e._v("事件：发生变化的触摸点")]),e._v(" "),n("li",[n("code",[e._v("touchend")]),e._v("事件：消失的触摸点（即不再被触碰的点）")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<style>\n    html,body {height: 100%}\n</style>\n<script>\n    document.body.addEventListener('touchmove', function (e) {\n        for (var i = 0; i < e.changedTouches.length; i++) {\n            console.log(e.changedTouches[i].identifier);\n        }\n    }, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("（3）TouchEvent.touches")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("TouchEvent.touches")]),this._v("属性返回一个"),t("code",[this._v("TouchList")]),this._v("实例，成员是所有仍然处于活动状态（即触摸中）的触摸点。一般来说，一个手指就是一个触摸点。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<style>\n    html,body {height: 100%}\n</style>\n<script>\n    document.body.addEventListener('touchstart', function (e) {\n        console.log(e.touches.length)\n        //       switch (e.touches.length) {\n        //           // 一根手指触摸\n        //         case 1: handle_one_touches(e); break;\n        //           // 两根手指触摸\n        //         case 2: handle_two_touches(e); break;\n        //           // 三根手指触摸\n        //         case 3: handle_three_touches(e); break;\n        //           // 其他情况\n        //         default: console.log('Not supported'); break;\n        //       }\n    }, false);\n<\/script>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("（4）TouchEvent.targetTouches")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("TouchEvent.targetTouches")]),this._v("属性返回一个"),t("code",[this._v("TouchList")]),this._v("实例，成员是触摸事件的目标元素节点内部、所有仍然处于活动状态（即触摸中）的触摸点。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function touches_in_target(ev) {\n  return (ev.touches.length === ev.targetTouches.length ? true : false);\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_21-触摸事件的种类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-触摸事件的种类","aria-hidden":"true"}},[this._v("#")]),this._v(" 21. 触摸事件的种类")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("触摸引发的事件，有以下几种。可以通过"),t("code",[this._v("TouchEvent.type")]),this._v("属性，查看到底发生的是哪一种事件。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("touchstart")]),e._v("：用户开始触摸时触发，它的"),n("code",[e._v("target")]),e._v("属性返回发生触摸的元素节点。")]),e._v(" "),n("li",[n("code",[e._v("touchend")]),e._v("：用户不再接触触摸屏时（或者移出屏幕边缘时）触发，它的"),n("code",[e._v("target")]),e._v("属性与"),n("code",[e._v("touchstart")]),e._v("事件一致的，就是开始触摸时所在的元素节点。它的"),n("code",[e._v("changedTouches")]),e._v("属性返回一个"),n("code",[e._v("TouchList")]),e._v("实例，包含所有不再触摸的触摸点（即"),n("code",[e._v("Touch")]),e._v("实例对象）。")]),e._v(" "),n("li",[n("code",[e._v("touchmove")]),e._v("：用户移动触摸点时触发，它的"),n("code",[e._v("target")]),e._v("属性与"),n("code",[e._v("touchstart")]),e._v("事件一致。如果触摸的半径、角度、力度发生变化，也会触发该事件。")]),e._v(" "),n("li",[n("code",[e._v("touchcancel")]),e._v("：触摸点取消时触发，比如在触摸区域跳出一个情态窗口（modal window）、触摸点离开了文档区域（进入浏览器菜单栏）、用户的触摸点太多，超过了支持的上限（自动取消早先的触摸点）。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var el = document.getElementsByTagName('canvas')[0];\nel.addEventListener('touchstart', handleStart, false);\nel.addEventListener('touchmove', handleMove, false);\n\nfunction handleStart(evt) {\n  evt.preventDefault();\n  var touches = evt.changedTouches;\n  for (var i = 0; i < touches.length; i++) {\n    console.log(touches[i].pageX, touches[i].pageY);\n  }\n}\n\nfunction handleMove(evt) {\n  evt.preventDefault();\n  var touches = evt.changedTouches;\n  for (var i = 0; i < touches.length; i++) {\n    var touch = touches[i];\n    console.log(touch.pageX, touch.pageY);\n  }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_22-表单事件的种类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-表单事件的种类","aria-hidden":"true"}},[this._v("#")]),this._v(" 22. 表单事件的种类")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_22-1-input-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-1-input-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 22.1 input 事件")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("input")]),e._v("事件当"),n("code",[e._v("<input>")]),e._v("、"),n("code",[e._v("<select>")]),e._v("、"),n("code",[e._v("<textarea>")]),e._v("的值发生变化时触发。对于复选框（"),n("code",[e._v("<input type=checkbox>")]),e._v("）或单选框（"),n("code",[e._v("<input type=radio>")]),e._v("），用户改变选项时，也会触发这个事件。另外，对于打开"),n("code",[e._v("contenteditable")]),e._v("属性的元素，只要值发生变化，也会触发"),n("code",[e._v("input")]),e._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("input")]),this._v("事件的一个特点，就是会连续触发，比如用户每按下一次按键，就会触发一次"),t("code",[this._v("input")]),this._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("input")]),this._v("事件对象继承了"),t("code",[this._v("InputEvent")]),this._v("接口。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<input id="test" type="text" value="Select me!" />\n<script>\n    var elem = document.getElementById(\'test\');\n    elem.addEventListener(\'input\', function (e) {\n        console.log(e.type); // "input"\n    }, false);\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_22-2-select-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-2-select-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 22.2 select 事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("select")]),this._v("事件当在"),t("code",[this._v("<input>")]),this._v("、"),t("code",[this._v("<textarea>")]),this._v("里面选中文本时触发。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<input id="test" type="text" value="Select me!" />\n  <script>\n    var elem = document.getElementById(\'test\');\n    elem.addEventListener(\'select\', function (e) {\n      console.log(e.type); // "select"\n    }, false);\n  <\/script>\n')])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("选中的文本可以通过"),n("code",[e._v("event.target")]),e._v("元素的"),n("code",[e._v("selectionDirection")]),e._v("、"),n("code",[e._v("selectionEnd")]),e._v("、"),n("code",[e._v("selectionStart")]),e._v("和"),n("code",[e._v("value")]),e._v("属性拿到。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_22-3-change-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-3-change-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 22.3 Change 事件")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("Change")]),e._v("事件当"),n("code",[e._v("<input>")]),e._v("、"),n("code",[e._v("<select>")]),e._v("、"),n("code",[e._v("<textarea>")]),e._v("的值发生变化时触发。它与"),n("code",[e._v("input")]),e._v("事件的最大不同，就是不会连续触发，只有当全部修改完成时才会触发，另一方面"),n("code",[e._v("input")]),e._v("事件必然伴随"),n("code",[e._v("change")]),e._v("事件。具体来说，分成以下几种情况。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("激活单选框（radio）或复选框（checkbox）时触发。")]),this._v(" "),t("li",[this._v("用户提交时触发。比如，从下列列表（select）完成选择，在日期或文件输入框完成选择。")]),this._v(" "),t("li",[this._v("当文本框或"),t("code",[this._v("<textarea>")]),this._v("元素的值发生改变，并且丧失焦点时触发。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<script>\n    function changeEventHandler(event) {\n        console.log(event.target.value);\n    }\n<\/script>\n\n<select size="1" onchange="changeEventHandler(event);">\n    <option>chocolate</option>\n    <option>strawberry</option>\n    <option>vanilla</option>\n</select>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_22-4-invalid-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-4-invalid-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 22.4 invalid 事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("用户提交表单时，如果表单元素的值不满足校验条件，就会触发"),t("code",[this._v("invalid")]),this._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<form>\n  <input type="text" required oninvalid="console.log(\'invalid input\')" />\n  <button type="submit">提交</button>\n</form>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码中，输入框是必填的。如果不填，用户点击按钮提交时，就会触发输入框的"),t("code",[this._v("invalid")]),this._v("事件，导致提交被取消。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_22-5-reset-事件，submit-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-5-reset-事件，submit-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 22.5 reset 事件，submit 事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这两个事件发生在表单对象"),t("code",[this._v("<form>")]),this._v("上，而不是发生在表单的成员上。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("reset")]),this._v("事件当表单重置（所有表单成员变回默认值）时触发。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("submit")]),e._v("事件当表单数据向服务器提交时触发。注意，"),n("code",[e._v("submit")]),e._v("事件的发生对象是"),n("code",[e._v("<form>")]),e._v("元素，而不是"),n("code",[e._v("<button>")]),e._v("元素，因为提交的是表单，而不是按钮。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_23-资源事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-资源事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 23. 资源事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_23-1-beforeunload-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-1-beforeunload-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 23.1 beforeunload 事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("beforeunload")]),this._v("事件在窗口、文档、各种资源将要卸载前触发。它可以用来防止用户不小心卸载资源。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("如果该事件对象的"),t("code",[this._v("returnValue")]),this._v("属性是一个非空字符串，那么浏览器就会弹出一个对话框，询问用户是否要卸载该资源。但是，用户指定的字符串可能无法显示，浏览器会展示预定义的字符串。如果用户点击“取消”按钮，资源就不会卸载。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("window.addEventListener('beforeunload', function(event) {\n  event.returnValue = '你确定离开吗？';\n});\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("浏览器对这个事件的行为很不一致，有的浏览器调用"),t("code",[this._v("event.preventDefault()")]),this._v("，也会弹出对话框。IE 浏览器需要显式返回一个非空的字符串，才会弹出对话框。而且，大多数浏览器在对话框中不显示指定文本，只显示默认文本。因此，可以采用下面的写法，取得最大的兼容性。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("window.addEventListener('beforeunload', function(e) {\n  var confirmationMessage = '确认关闭窗口？';\n  e.returnValue = confirmationMessage;\n  return confirmationMessage;\n});\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_23-2-unload-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-2-unload-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 23.2 unload 事件")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("unload")]),e._v("事件在窗口关闭或者"),n("code",[e._v("document")]),e._v("对象将要卸载时触发。它的触发顺序排在"),n("code",[e._v("beforeunload")]),e._v("、"),n("code",[e._v("pagehide")]),e._v("事件后面。"),n("code",[e._v("unload")]),e._v("事件只在页面没有被浏览器缓存时才会触发，换言之，如果通过按下“前进/后退”导致页面卸载，并不会触发"),n("code",[e._v("unload")]),e._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("unload")]),this._v("事件发生时，文档处于一个特殊状态。所有资源依然存在，但是对用户来说都不可见，UI 互动全部无效。这个事件是无法取消的，即使在监听函数里面抛出错误，也不能停止文档的卸载。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("window.addEventListener('unload', function(event) {\n  console.log('文档将要卸载');\n});\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_23-3-load-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-3-load-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 23.3 load 事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("load")]),this._v("事件在页面或某个资源加载成功时触发。注意，页面或资源从浏览器缓存加载，并不会触发"),t("code",[this._v("load")]),this._v("事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("window.addEventListener('load', function(event) {\n  console.log('所有资源都加载完成');\n});\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("error")]),this._v("事件是在页面或资源加载失败时触发。"),t("code",[this._v("abort")]),this._v("事件在用户取消加载时触发。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("这三个事件实际上属于进度事件，不仅发生在"),n("code",[e._v("document")]),e._v("对象，还发生在各种外部资源上面。浏览网页就是一个加载各种资源的过程，图像（image）、样式表（style sheet）、脚本（script）、视频（video）、音频（audio）、Ajax请求（XMLHttpRequest）等等。这些资源和"),n("code",[e._v("document")]),e._v("对象、"),n("code",[e._v("window")]),e._v("对象、XMLHttpRequestUpload 对象，都会触发"),n("code",[e._v("load")]),e._v("事件和"),n("code",[e._v("error")]),e._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_24-session-历史事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-session-历史事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 24. session 历史事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_24-1-pageshow-事件，pagehide-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-1-pageshow-事件，pagehide-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 24.1 pageshow 事件，pagehide 事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("第一次加载时，它的触发顺序排在"),t("code",[this._v("load")]),this._v("事件后面。从缓存加载时，"),t("code",[this._v("load")]),this._v("事件不会触发，因为网页在缓存中的样子通常是"),t("code",[this._v("load")]),this._v("事件的监听函数运行后的样子，所以不必重复执行。同理，如果是从缓存中加载页面，网页内初始化的 JavaScript 脚本（比如 DOMContentLoaded 事件的监听函数）也不会执行。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("window.addEventListener('pageshow', function(event) {\n  console.log('pageshow: ', event);\n});\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("pageshow 事件有一个"),t("code",[this._v("persisted")]),this._v("属性，返回一个布尔值。页面第一次加载时，这个属性是"),t("code",[this._v("false")]),this._v("；当页面从缓存加载时，这个属性是"),t("code",[this._v("true")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("window.addEventListener('pageshow', function(event){\n  if (event.persisted) {\n    // ...\n  }\n});\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("pagehide")]),e._v("事件与"),n("code",[e._v("pageshow")]),e._v("事件类似，当用户通过“前进/后退”按钮，离开当前页面时触发。它与 unload 事件的区别在于，如果在 window 对象上定义"),n("code",[e._v("unload")]),e._v("事件的监听函数之后，页面不会保存在缓存中，而使用"),n("code",[e._v("pagehide")]),e._v("事件，页面会保存在缓存中。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("pagehide")]),e._v("事件实例也有一个"),n("code",[e._v("persisted")]),e._v("属性，将这个属性设为"),n("code",[e._v("true")]),e._v("，就表示页面要保存在缓存中；设为"),n("code",[e._v("false")]),e._v("，表示网页不保存在缓存中，这时如果设置了unload 事件的监听函数，该函数将在 pagehide 事件后立即运行。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("如果页面包含"),n("code",[e._v("<frame>")]),e._v("或"),n("code",[e._v("<iframe>")]),e._v("元素，则"),n("code",[e._v("<frame>")]),e._v("页面的"),n("code",[e._v("pageshow")]),e._v("事件和"),n("code",[e._v("pagehide")]),e._v("事件，都会在主页面之前触发。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_24-2-popstate-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-2-popstate-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 24.2 popstate 事件")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("popstate")]),e._v("事件在浏览器的"),n("code",[e._v("history")]),e._v("对象的当前记录发生显式切换时触发。注意，调用"),n("code",[e._v("history.pushState()")]),e._v("或"),n("code",[e._v("history.replaceState()")]),e._v("，并不会触发"),n("code",[e._v("popstate")]),e._v("事件。该事件只在用户在"),n("code",[e._v("history")]),e._v("记录之间显式切换时触发，比如鼠标点击“后退/前进”按钮，或者在脚本中调用"),n("code",[e._v("history.back()")]),e._v("、"),n("code",[e._v("history.forward()")]),e._v("、"),n("code",[e._v("history.go()")]),e._v("时触发。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("该事件对象有一个"),n("code",[e._v("state")]),e._v("属性，保存"),n("code",[e._v("history.pushState")]),e._v("方法和"),n("code",[e._v("history.replaceState")]),e._v("方法为当前记录添加的"),n("code",[e._v("state")]),e._v("对象。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("window.onpopstate = function (event) {\n  console.log('state: ' + event.state);\n};\nhistory.pushState({page: 1}, 'title 1', '?page=1');\nhistory.pushState({page: 2}, 'title 2', '?page=2');\nhistory.replaceState({page: 3}, 'title 3', '?page=3');\nhistory.back(); // state: {\"page\":1}\nhistory.back(); // state: null\nhistory.go(2);  // state: {\"page\":3}\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("上面代码中，"),n("code",[e._v("pushState")]),e._v("方法向"),n("code",[e._v("history")]),e._v("添加了两条记录，然后"),n("code",[e._v("replaceState")]),e._v("方法替换掉当前记录。因此，连续两次"),n("code",[e._v("back")]),e._v("方法，会让当前条目退回到原始网址，它没有附带"),n("code",[e._v("state")]),e._v("对象，所以事件的"),n("code",[e._v("state")]),e._v("属性为"),n("code",[e._v("null")]),e._v("，然后前进两条记录，又回到"),n("code",[e._v("replaceState")]),e._v("方法添加的记录。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("浏览器对于页面首次加载，是否触发"),t("code",[this._v("popstate")]),this._v("事件，处理不一样，Firefox 不触发该事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_24-3-hashchange-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-3-hashchange-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 24.3 hashchange 事件")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("hashchange")]),e._v("事件在 URL 的 hash 部分（即"),n("code",[e._v("#")]),e._v("号后面的部分，包括"),n("code",[e._v("#")]),e._v("号）发生变化时触发。该事件一般在"),n("code",[e._v("window")]),e._v("对象上监听。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("hashchange")]),this._v("的事件实例具有两个特有属性："),t("code",[this._v("oldURL")]),this._v("属性和"),t("code",[this._v("newURL")]),this._v("属性，分别表示变化前后的完整 URL。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// URL 是 http://www.example.com/\nwindow.addEventListener('hashchange', myFunction);\nfunction myFunction(e) {\n  console.log(e.oldURL);\n  console.log(e.newURL);\n}\nlocation.hash = 'part2';\n// http://www.example.com/\n// http://www.example.com/#part2\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_25-网页状态事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-网页状态事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 25. 网页状态事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_25-1-domcontentloaded-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-1-domcontentloaded-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 25.1 DOMContentLoaded 事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("网页下载并解析完成以后，浏览器就会在"),t("code",[this._v("document")]),this._v("对象上触发 DOMContentLoaded 事件。这时，仅仅完成了网页的解析（整张页面的 DOM 生成了），所有外部资源（样式表、脚本、iframe 等等）可能还没有下载结束。也就是说，这个事件比"),t("code",[this._v("load")]),this._v("事件，发生时间早得多。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("document.addEventListener('DOMContentLoaded', function (event) {\n  console.log('DOM生成');\n});\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("注意，网页的 JavaScript 脚本是同步执行的，脚本一旦发生堵塞，将推迟触发"),t("code",[this._v("DOMContentLoaded")]),this._v("事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("document.addEventListener('DOMContentLoaded', function (event) {\n  console.log('DOM 生成');\n});\n\n// 这段代码会推迟触发 DOMContentLoaded 事件\nfor(var i = 0; i < 1000000000; i++) {\n  // ...\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_25-2-readystatechange-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-2-readystatechange-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 25.2 readystatechange 事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("readystatechange")]),this._v("事件当 Document 对象和 XMLHttpRequest 对象的"),t("code",[this._v("readyState")]),this._v("属性发生变化时触发。"),t("code",[this._v("document.readyState")]),this._v("有三个可能的值：")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("loading")]),e._v("（网页正在加载）")]),e._v(" "),n("li",[n("code",[e._v("interactive")]),e._v("（网页已经解析完成，但是外部资源仍然处在加载状态）")]),e._v(" "),n("li",[n("code",[e._v("complete")]),e._v("（网页和所有外部资源已经结束加载，"),n("code",[e._v("load")]),e._v("事件即将触发）")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("document.onreadystatechange = function () {\n  if (document.readyState === 'interactive') {\n    // ...\n  }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这个事件可以看作"),t("code",[this._v("DOMContentLoaded")]),this._v("事件的另一种实现方法。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_26-窗口事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-窗口事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 26. 窗口事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_26-1-scroll-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-1-scroll-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 26.1 scroll 事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("scroll")]),this._v("事件在文档或文档元素滚动时触发，主要出现在用户拖动滚动条。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<div id="one" style="height: 100px; overflow: scroll;">\n    <p>1</p><p>1</p><p>2</p><p>3</p>\n</div>\n<script>\n    document.getElementById("one").addEventListener(\'scroll\', function(e) {\n        console.log(e);\n    });\n<\/script>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("该事件会连续地大量触发，所以它的监听函数之中不应该有非常耗费计算的操作。推荐的做法是使用"),t("code",[this._v("requestAnimationFrame")]),this._v("或"),t("code",[this._v("setTimeout")]),this._v("控制该事件的触发频率，然后可以结合"),t("code",[this._v("customEvent")]),this._v("抛出一个新事件。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("(function () {\n  var throttle = function (type, name, obj) {\n    var obj = obj || window;\n    var running = false;\n    var func = function () {\n      if (running) { return; }\n      running = true;\n      requestAnimationFrame(function() {\n        obj.dispatchEvent(new CustomEvent(name));\n        running = false;\n      });\n    };\n    obj.addEventListener(type, func);\n  };\n\n  // 将 scroll 事件重定义为 optimizedScroll 事件\n  throttle('scroll', 'optimizedScroll');\n})();\nwindow.addEventListener('optimizedScroll', function() {\n  console.log('Resource conscious scroll callback!');\n});\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("上面代码中，"),n("code",[e._v("throttle")]),e._v("函数用于控制事件触发频率，"),n("code",[e._v("requestAnimationFrame")]),e._v("方法保证每次页面重绘（每秒60次），只会触发一次"),n("code",[e._v("scroll")]),e._v("事件的监听函数。也就是说，上面方法将"),n("code",[e._v("scroll")]),e._v("事件的触发频率，限制在每秒60次。具体来说，就是"),n("code",[e._v("scroll")]),e._v("事件只要频率低于每秒60次，就会触发"),n("code",[e._v("optimizedScroll")]),e._v("事件，从而执行"),n("code",[e._v("optimizedScroll")]),e._v("事件的监听函数。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("改用"),t("code",[this._v("setTimeout")]),this._v("方法，可以放置更大的时间间隔。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("(function() {\n  window.addEventListener('scroll', scrollThrottler, false);\n\n  var scrollTimeout;\n  function scrollThrottler() {\n    if (!scrollTimeout) {\n      scrollTimeout = setTimeout(function () {\n        scrollTimeout = null;\n        actualScrollHandler();\n      }, 66);\n    }\n  }\n\n  function actualScrollHandler() {\n    // ...\n  }\n}());\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("上面代码中，每次"),n("code",[e._v("scroll")]),e._v("事件都会执行"),n("code",[e._v("scrollThrottler")]),e._v("函数。该函数里面有一个定时器"),n("code",[e._v("setTimeout")]),e._v("，每66毫秒触发一次（每秒15次）真正执行的任务"),n("code",[e._v("actualScrollHandler")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下面是一个更一般的"),t("code",[this._v("throttle")]),this._v("函数的写法。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("function throttle(fn, wait) {\n  var time = Date.now();\n  return function() {\n    if ((time + wait - Date.now()) < 0) {\n      fn();\n      time = Date.now();\n    }\n  }\n}\nwindow.addEventListener('scroll', throttle(callback, 1000));\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面的代码将"),t("code",[this._v("scroll")]),this._v("事件的触发频率，限制在一秒一次。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("lodash")]),this._v("函数库提供了现成的"),t("code",[this._v("throttle")]),this._v("函数，可以直接使用。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("window.addEventListener('scroll', _.throttle(callback, 1000));\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_26-2-resize-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-2-resize-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 26.2 resize 事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("resize")]),this._v("事件在改变浏览器窗口大小时触发，主要发生在"),t("code",[this._v("window")]),this._v("对象上面。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("var resizeMethod = function () {\n  if (document.body.clientWidth < 768) {\n    console.log('移动设备的视口');\n  }\n};\nwindow.addEventListener('resize', resizeMethod, true);\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("该事件也会连续地大量触发，所以最好像上面的"),t("code",[this._v("scroll")]),this._v("事件一样，通过"),t("code",[this._v("throttle")]),this._v("函数控制事件触发频率。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"_26-3-fullscreenchange-事件，fullscreenerror-事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-3-fullscreenchange-事件，fullscreenerror-事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 26.3 fullscreenchange 事件，fullscreenerror 事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("document.addEventListener('fullscreenchange', function (event) {\n  console.log(document.fullscreenElement);\n});\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("fullscreenerror")]),this._v("事件在浏览器无法切换到全屏状态时触发。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_27-剪贴板事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-剪贴板事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 27. 剪贴板事件")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("cut")]),e._v("：将选中的内容从文档中移除，加入剪贴板时触发。")]),e._v(" "),n("li",[n("code",[e._v("copy")]),e._v("：进行复制动作时触发。")]),e._v(" "),n("li",[n("code",[e._v("paste")]),e._v("：剪贴板内容粘贴到文档后触发。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这三个事件都是"),t("code",[this._v("ClipboardEvent")]),this._v("接口的实例。"),t("code",[this._v("ClipboardEvent")]),this._v("有一个实例属性"),t("code",[this._v("clipboardData")]),this._v("，是一个 DataTransfer 对象，存放剪贴的数据。具体的 API 接口和操作方法，请参见《触摸事件》的 DataTransfer 对象部分。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("document.addEventListener('copy', function (e) {\n  e.clipboardData.setData('text/plain', 'Hello, world!');\n  e.clipboardData.setData('text/html', '<b>Hello, world!</b>');\n  e.preventDefault();\n});\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("上面代码执行后，在页面复制(cmd + c), 然后在别的地方粘贴的内容会是"),t("code",[this._v("Hello, world!")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_28-焦点事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-焦点事件","aria-hidden":"true"}},[this._v("#")]),this._v(" 28. 焦点事件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("焦点事件发生在元素节点和"),t("code",[this._v("document")]),this._v("对象上面，与获得或失去焦点相关。它主要包括以下四个事件。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("focus")]),e._v("：元素节点获得焦点后触发，该事件不会冒泡。")]),e._v(" "),n("li",[n("code",[e._v("blur")]),e._v("：元素节点失去焦点后触发，该事件不会冒泡。")]),e._v(" "),n("li",[n("code",[e._v("focusin")]),e._v("：元素节点将要获得焦点时触发，发生在"),n("code",[e._v("focus")]),e._v("事件之前。该事件会冒泡。")]),e._v(" "),n("li",[n("code",[e._v("focusout")]),e._v("：元素节点将要失去焦点时触发，发生在"),n("code",[e._v("blur")]),e._v("事件之前。该事件会冒泡。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这四个事件都继承了"),t("code",[this._v("FocusEvent")]),this._v("接口。"),t("code",[this._v("FocusEvent")]),this._v("实例具有以下属性。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("FocusEvent.target")]),e._v("：事件的目标节点。")]),e._v(" "),n("li",[n("code",[e._v("FocusEvent.relatedTarget")]),e._v("：对于"),n("code",[e._v("focusin")]),e._v("事件，返回失去焦点的节点；对于"),n("code",[e._v("focusout")]),e._v("事件，返回将要接受焦点的节点；对于"),n("code",[e._v("focus")]),e._v("和"),n("code",[e._v("blur")]),e._v("事件，返回"),n("code",[e._v("null")]),e._v("。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("由于"),n("code",[e._v("focus")]),e._v("和"),n("code",[e._v("blur")]),e._v("事件不会冒泡，只能在捕获阶段触发，所以"),n("code",[e._v("addEventListener")]),e._v("方法的第三个参数需要设为"),n("code",[e._v("true")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("form.addEventListener('focus', function (event) {\n  event.target.style.background = 'pink';\n}, true);\n\nform.addEventListener('blur', function (event) {\n  event.target.style.background = '';\n}, true);\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_29-参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29-参考资料","aria-hidden":"true"}},[this._v("#")]),this._v(" 29. 参考资料")])}],!1,null,null,null);a.options.__file="010-事件种类.md";t.default=a.exports}}]);